openapi: 3.0.3
info:
  title: Kedai API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:8080
  - url: https://dev-kedai-y3gq8.ondigitalocean.app
tags:
  - name: Location
  - name: User
  - name: Product
  - name: Shop
  - name: Marketplace
  - name: Order
  - name: Seller
  - name: User
paths:
  /v1/orders/transactions/reviews:
    post:
      security:
        - BearerAuth: []
      tags:
        - Order
      summary: Post a transaction review
      description: Add transaction review to a transaction
      requestBody:
        $ref: '#/components/requestBodies/TransactionReviewBody'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/TransactionReview'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '404':
          description: data not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: NOT_FOUND
                  message:
                    type: string
                    example: error message
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: TRANSACTION_REVIEW_ALREADY_EXIST
                  message:
                    type: string
                    example: error message            
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: INTERNAL_SERVER_ERROR
                  message:
                    type: string
                    example: error message    
  /v1/users/wallets:
    get:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: Get wallet information
      description: Get user's wallet information
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Wallet'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '404':
          description: data not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: NOT_FOUND
                  message:
                    type: string
                    example: error message
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: INTERNAL_SERVER_ERROR
                  message:
                    type: string
                    example: error message
    post:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: Register user wallet
      description: Create wallet for current authenticated user
      requestBody:
        $ref: '#/components/requestBodies/WalletBody'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      code:
                        example: 'CREATED'
                      message:
                        example: 'wallet registered successfully'
                      data:
                        $ref: '#/components/schemas/Wallet'
        '400':
          description: Invalid pin
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "BAD_REQUEST"
                  message:
                    type: string
                    example: "pin must be numeric and have 6 characters"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '409':
          description: User already has a wallet
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "WALLET_ALREADY_EXIST"
                  message:
                    type: string
                    example: "user only allowed to have one wallet"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/users/wallets/step-up:
    post:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: Step up verification
      description: Verify user wallet's pin for payment purpose. Return new token with stepped up level claim
      requestBody:
        $ref: '#/components/requestBodies/StepUpBody'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      code:
                        example: 'OK'
                      message:
                        example: 'success'
                      data:
                        $ref: '#/components/schemas/Token'
        '400':
          description: Invalid pin
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INVALID_PIN"
                  message:
                    type: string
                    example: "wrong pin"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '404':
          description: Wallet not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "NOT_FOUND"
                  message:
                    type: string
                    example: "wallet not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/users/wallets/pins/change-requests:
    post:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: Create request to change wallet pin
      description: Generate a token to change wallet pin
      requestBody:
        $ref: '#/components/requestBodies/ChangePinRequestBody'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: OK
                  message:
                    type: string
                    example: success
        '400':
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "BAD_REQUEST"
                  message:
                    type: string
                    example: "error message"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: NOT_FOUND
                  message:
                    type: string
                    example: error message
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: INTERNAL_SERVER_ERROR
                  message:
                    type: string
                    example: error message
  /v1/users/wallets/pins/change-confirmations:
    post:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: Complete change wallet pin request
      description: Confirm change wallet pin request so that change pin takes effect
      requestBody:
        $ref: '#/components/requestBodies/CompleteChangePinRequestBody'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: OK
                  message:
                    type: string
                    example: success
        '400':
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "BAD_REQUEST"
                  message:
                    type: string
                    example: "error message"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: NOT_FOUND
                  message:
                    type: string
                    example: error message
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: INTERNAL_SERVER_ERROR
                  message:
                    type: string
                    example: error message
  /v1/users/wallets/pins/reset-requests:
    post:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: Create request to reset wallet pin
      description: Generate a token to reset wallet pin
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: OK
                  message:
                    type: string
                    example: success
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: INTERNAL_SERVER_ERROR
                  message:
                    type: string
                    example: error message
  /v1/users/wallets/pins/reset-confirmations:
    post:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: Complete rese wallet pin request
      description: Complete reset wallet pin request
      requestBody:
        $ref: '#/components/requestBodies/CompleteResetPinRequestBody'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: OK
                  message:
                    type: string
                    example: success
        '400':
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "BAD_REQUEST"
                  message:
                    type: string
                    example: "error message"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: NOT_FOUND
                  message:
                    type: string
                    example: error message
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: INTERNAL_SERVER_ERROR
                  message:
                    type: string
                    example: error message
  /v1/users/wallets/{ref}:
    get:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: Get wallet transaction information
      description: Get user's wallet transaction information
      parameters:
        - in: path
          name: ref
          description: Reference code of chosen transaction detail
          required: true
          schema:
            type: string
            example: "129920"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/WalletHistory'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '404':
          description: data not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: NOT_FOUND
                  message:
                    type: string
                    example: error message
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: INTERNAL_SERVER_ERROR
                  message:
                    type: string
                    example: error message
  /v1/users/wallets/histories:
    get:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: User get wallet transaction histories
      description: User get wallet transaction histories
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
        - in: query
          name: page
          schema:
            type: integer
            default: 1
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/PaginationResponse'
                          - type: object
                            properties:
                              data:
                                type: array
                                items:
                                  $ref: '#/components/schemas/WalletHistory'
        '404':
          description: wallet not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "NOT_FOUND"
                  message:
                    type: string
                    example: "user wallet does not exist"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
          
  /v1/users/wallets/top-up:
    post:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: User wallet top-up
      description: User wallet top-up
      parameters:
        - in: query
          name: amount
          required: true
          schema:
            type: integer
            example: 50000
        - in: query
          name: txnId
          required: true
          schema:
            type: string
            example: 68102
        - in: query
          name: signature
          required: true
          schema:
            type: string
            example: "aisjd81923jikasd123324008123"
        - in: query
          name: cardNumber
          required: true
          schema:
            type: string
            example: "293774202332"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/WalletHistory'
        '400':
          description: invalid amount
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "BAD_REQUEST"
                  message:
                    type: string
                    example: "amount must be greater than 10000"
        '422':
          description: invalid signature pattern
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INVALID_SIGNATURE"
                  message:
                    type: string
                    example: "invalid signature"
        '404':
          description: wallet not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "NOT_FOUND"
                  message:
                    type: string
                    example: "user wallet does not exist"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
        
  /v1/users:
    get:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: Get user profile
      description: Get user profile data
      responses:
        '200':
          description: successful operation
          content:
            aplication/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '404':
          description: not found
          content:
            aplication/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "NOT_FOUND"
                  message:
                    type: string
                    example: "error message"
        '500':
          description: internal server error
          content:
            aplication/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/users/register:
    post:
      tags:
        - User
      summary: Register new user
      description: Register new user data
      requestBody:
        $ref: '#/components/requestBodies/RegisterUserBody'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          email:
                            type: string
                            format: email
                            example: "user@mail.com"
                          username:
                            type: string
                            example: "user145"
        '400':
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "BAD_REQUEST"
                  message:
                    type: string
                    example: "Email is required"
        '409':
          description: duplicate entry
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "EMAIL_ALREADY_REGISTERED"
                  message:
                    type: string
                    example: "User already exist"
        '422':
          description: invalid password pattern
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INVALID_PASSWORD_PATTERN"
                  message:
                    type: string
                    example: "invalid password pattern"
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/users/login:
    post:
      tags:
        - User
      summary: User login
      description: User login to get auth token
      requestBody:
        $ref: '#/components/requestBodies/LoginUserBody'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Token'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "BAD_REQUEST"
                  message:
                    type: string
                    example: "Email is required"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/users/google-register:
    post:
      tags:
        - User
      summary: User register with google
      description: User register with google to get auth token and refresh token
      requestBody:
        $ref: '#/components/requestBodies/GoogleRegisterUserBody'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Token'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "BAD_REQUEST"
                  message:
                    type: string
                    example: "Credential is required"
        '409':
          description: duplicate entry
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "EMAIL_ALREADY_REGISTERED"
                  message:
                    type: string
                    example: "User already exist"
        '422':
          description: invalid password pattern
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INVALID_PASSWORD_PATTERN"
                  message:
                    type: string
                    example: "invalid password pattern"
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"                
  /v1/users/google-login:
    post:
      tags:
        - User
      summary: User login with google
      description: User login with google to get auth token
      requestBody:
        $ref: '#/components/requestBodies/GoogleLoginUserBody'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Token'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "BAD_REQUEST"
                  message:
                    type: string
                    example: "Credential is required"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "NOT_FOUND"
                  message:
                    type: string
                    example: "user not found"
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/users/tokens/refresh:
    post:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: Renew an access token
      description: Renew an access token using refresh token. This will create a new access and refresh token
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            description: refresh token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Token'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/users/passwords/change-request:
    post:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: Request password change
      description: This endpoint is the 1st step of a 2 step procedure. It will receive user's current password and new passowrd, then send a verification code to user's registered email if success.
      requestBody:
        $ref: '#/components/requestBodies/RequestPasswordChangeBody'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "OK"
                  message:
                    type: string
                    example: "ok"
        '400':
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "WRONG_PASSWORD"
                  message:
                    type: string
                    example: "wrong password"          
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "NOT_FOUND"
                  message:
                    type: string
                    example: "user not registered"
        '422':
          description: invalid password pattern
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INVALID_PASSWORD_PATTERN"
                  message:
                    type: string
                    example: "invalid password pattern"            
                  
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"             
  /v1/users/passwords/change-confirmation:
    post:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: Compete password change
      description: This endpoint is the 2nd step of a 2 step procedure. It will receive verification code which has been sent to the user's email, then update the password, finally logging out the user from all devices.
      requestBody:
        $ref: '#/components/requestBodies/CompletePasswordChangeBody'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "OK"
                  message:
                    type: string
                    example: "ok"
        '400':
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INCORRECT_VERIFICATION_CODE"
                  message:
                    type: string
                    example: "incorrect verification code"          
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "NOT_FOUND"
                  message:
                    type: string
                    example: "verification code not found"
                  
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/users/passwords/reset-request:
    post:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: Compete password change
      description: This endpoint is the 1st step of a 2 step procedure. It will receive email, then send a reset password link to that email if it is connected to a user.
      requestBody:
        $ref: '#/components/requestBodies/RequestPasswordResetBody'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "OK"
                  message:
                    type: string
                    example: "ok"
        '400':
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "BAD_REQUEST"
                  message:
                    type: string
                    example: "Email is required"          
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "USER_NOT_REGISTERED"
                  message:
                    type: string
                    example: "user does not exist"
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"       
  /v1/users/passwords/reset-confirmation:
    post:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: Compete password change
      description: This endpoint is the 2nd step of a 2 step procedure. It will receive token and new password, then if the token and new password is valid the password will be reset. User will also get logged out from all devices.
      requestBody:
        $ref: '#/components/requestBodies/CompletePasswordResetBody'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "OK"
                  message:
                    type: string
                    example: "ok"
        '400':
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "SAME_PASSWORD"
                  message:
                    type: string
                    example: "same_password"          
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "NOT_FOUND"
                  message:
                    type: string
                    example: "reset password token not found"
        '422':
          description: invalid password pattern
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INVALID_PASSWORD_PATTERN"
                  message:
                    type: string
                    example: "invalid password pattern"             
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"                  
  /v1/users/logout:
    post:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: Logout from current device
      description: Remove both access token and refresh token from db.
      requestBody:
        $ref: '#/components/requestBodies/UserLogoutBody'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "OK"
                  message:
                    type: string
                    example: "ok"
                  
        '400':
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: BAD_REQUEST
                  message:
                    type: string
                    example: error message
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"

  /v1/users/emails:
    put:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: Update user email
      description: Replace current user email with a new one. Previous email will be unusable
      requestBody:
        $ref: '#/components/requestBodies/UpdateEmailBody'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          email:
                            type: string
                            format: email
                            example: user@email.com
        '400':
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: BAD_REQUEST
                  message:
                    type: string
                    example: error message
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '409':
          description: conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: CONFLICT
                  message:
                    type: string
                    example: error message
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/users/usernames:
    put:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: Update user's username
      description: Replace current username with a new one
      requestBody:
        $ref: '#/components/requestBodies/UpdateUsernameBody'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          username:
                            type: string
                            format: email
                            example: new_username
        '400':
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: BAD_REQUEST
                  message:
                    type: string
                    example: error message
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '409':
          description: conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: CONFLICT
                  message:
                    type: string
                    example: error message
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: INTERNAL_SERVER_ERROR
                  message:
                    type: string
                    example: error message
  /v1/users/profiles:
    put:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: Update user profile
      description: Update user profile (name, phone number, gender, date of birth, and profile photo)
      requestBody:
        $ref: '#/components/requestBodies/UpdateProfileBody'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id:
                            type: number
                            example: 1
                          name:
                            type: string
                            example: new name
                          phoneNumber:
                            type: string
                            description: numeric
                            minLength: 10
                            maxLength: 15
                            example: 0123456789
                          dob:
                            type: string
                            format: date
                            description: date format is YYYY-MM-DD
                            example: "2006-01-02"
                          gender:
                            type: string
                            example: others
                          photoUrl:
                            type: string
                            format: url
                            example: http://photo.url/example.png
        '400':
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: BAD_REQUEST
                  message:
                    type: string
                    example: error message
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: INTERNAL_SERVER_ERROR
                  message:
                    type: string
                    example: error message
  /v1/locations/provinces:
    get:
      tags:
        - Location
      summary: Get province list
      description: Get list of provinces
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      code:
                        example: 'OK'
                      message:
                        example: 'success'
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Province'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"                  
  /v1/locations/cities:
    get:
      tags:
        - Location
      summary: Get city list
      description: Get list of cities with pagination, filter by province id, and sort by most shops
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 0
          description: No default limit, will get all data if not specified
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: provinceId
          schema:
            type: integer
          description: Filter to get cities by province
        - in: query
          name: sort
          schema:
            type: string
          description: most_shops to sort cities by most shops
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      code:
                        example: 'OK'
                      message:
                        example: 'success'
                      data:
                        allOf:
                          - $ref: '#/components/schemas/PaginationResponse'
                          - type: object
                            properties:
                              data:
                                type: array
                                items:
                                  $ref: '#/components/schemas/City'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/locations/districts:
    get:
      tags:
        - Location
      summary: Get district list
      description: Get list of districts (can be filtered by city id)
      parameters:
        - in: query
          name: cityId
          schema:
            type: integer
          description: Filter to get districts by city
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      code:
                        example: 'OK'
                      message:
                        example: 'success'
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/District'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/locations/subdistricts:
    get:
      tags:
        - Location
      summary: Get subdistrict list
      description: Get list of subdistricts (can be filtered by district id)
      parameters:
        - in: query
          name: districtId
          schema:
            type: integer
          description: Filter to get subdistricts by district
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      code:
                        example: 'OK'
                      message:
                        example: 'success'
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Subdistrict'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"                              
  /v1/locations/addresses:
    get:
      tags:
        - Location
      summary: Search address on google maps
      description: Get list of addresses which match the keyword given
      parameters:
        - in: query
          name: keyword
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      code:
                        example: 'OK'
                      message:
                        example: 'success'
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/SearchAddressResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"                              
  /v1/locations/addresses/{placeId}:
    get:
      tags:
        - Location
      summary: Get search address detail from google maps
      description: Get address detail from google maps including its parent location detail
      parameters:
        - in: path
          required: true
          name: placeId
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      code:
                        example: 'OK'
                      message:
                        example: 'success'
                      data:
                        $ref: '#/components/schemas/SearchAddressDetailResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"                              
  /v1/users/carts:
    get:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: Get cart items list
      description: Get list of cart items
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Default is 10 shop per page
        - in: query
          name: page
          schema:
            type: integer
            default: 1
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      code:
                        example: 'OK'
                      message:
                        example: 'success'
                      data:
                        allOf:
                          - $ref: '#/components/schemas/PaginationResponse'
                          - type: object
                            properties:
                              data:
                                type: array
                                items:
                                  allOf:
                                    - type: object
                                      properties:
                                        shop:
                                          $ref: '#/components/schemas/CartItemShopResponse'
                                    - type: object
                                      properties:
                                        cartItems:
                                          $ref: '#/components/schemas/CartItemResponse'

        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
    post:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: User add item to cart
      description: Add item to user cart
      requestBody:
        $ref: '#/components/requestBodies/AddCartItemBody'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/CartItem'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "BAD_REQUEST"
                  message:
                    type: string
                    example: "Quantity is required"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "NOT_FOUND"
                  message:
                    type: string
                    example: "sku not found"
        '409':
          description: conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "CONFLICT"
                  message:
                    type: string
                    example: "sku quantity not enough"
        '403':
          description: forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "FORBIDDEN"
                  message:
                    type: string
                    example: "user is shop owner"            
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
    delete:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: Delete user cart items
      description: Delete cart item from cart with cart item id
      parameters:
      - name: cartItemId
        in: query
        description: Can receive multiple cart item ids to delete
        required: true
        schema:
          type: array
          items:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "DELETED"
                      message:
                        type: string
                        example: "delete cart item succesful"
        '400':
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "BAD_REQUEST"
                  message:
                    type: string
                    example: "cartItemIds is required"                
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "NOT_FOUND"
                  message:
                    type: string
                    example: "cart item not found"
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"                
  /v1/users/carts/{skuId}:
    put:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: Edit user cart
      description: Edit an existing user cart item
      parameters:
        - in: path
          name: skuId
          required: true
          description: product sku ID, must be an integer and greater than or equal 1
          schema:
            type: integer
            example: 1
            minimum: 1
      requestBody:
        $ref: '#/components/requestBodies/UpdateCartItemBody'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "UPDATED"
                      message:
                        type: string
                        example: "update successful"
                      data:
                        $ref: '#/components/schemas/CartItem'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "BAD_REQUEST"
                  message:
                    type: string
                    example: "Quantity is required"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "NOT_FOUND"
                  message:
                    type: string
                    example: "sku not found"
        '409':
          description: conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "CONFLICT"
                  message:
                    type: string
                    example: "sku quantity not enough"
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
                      
  /v1/users/addresses:
    get:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: Get User Addresses
      description: Get all user addresses (sorted by default address first, then pickup address, then add date)
      responses:
        '200':
          description: successful fetch
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      code:
                        example: 'OK'
                      message:
                        example: 'success'
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UserAddress'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"            
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"  
    post:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: Add new address
      description: Add new user address
      requestBody:
        $ref: '#/components/requestBodies/AddressBody'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      code:
                        example: 'CREATED'
                      message:
                        example: 'created'
                      data:
                        $ref: '#/components/schemas/UserAddress'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "BAD_REQUEST"
                  message:
                    type: string
                    example: "error message"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"            
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "SUBDISTRICT_NOT_FOUND"
                  message:
                    type: string
                    example: "error message"         
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "MAX_ADDRESS_REACHED"
                  message:
                    type: string
                    example: "max address amount reached"            
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/users/addresses/{addressId}:                  
    put:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: Add new address
      description: Add new user address
      parameters:
        - in: path
          name: addressId
          required: true
          description: Address Id of the address to be updated
          schema:
            type: integer
            example: 1
      requestBody:
        $ref: '#/components/requestBodies/AddressBody'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      code:
                        example: 'OK'
                      message:
                        example: 'success'
                      data:
                        $ref: '#/components/schemas/UserAddress'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "BAD_REQUEST"
                  message:
                    type: string
                    example: "error message"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"            
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "ADDRESS_NOT_FOUND"
                  message:
                    type: string
                    example: "error message"         
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "MUST_HAVE_AT_LEAST_ONE_DEFAULT_ADDRESS"
                  message:
                    type: string
                    example: "must have at least one default address"            
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
    delete:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: Delete existing user address
      description: Delete user address using address id. Cannot delete default address or pickup address.
      parameters:
        - in: path
          name: addressId
          required: true
          description: Address Id of the address to be deleted
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "OK"
                  message:
                    type: string
                    example: "success"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "BAD_REQUEST"
                  message:
                    type: string
                    example: "error message"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"            
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "ADDRESS_NOT_FOUND"
                  message:
                    type: string
                    example: "error message"         
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "MUST_HAVE_AT_LEAST_ONE_DEFAULT_ADDRESS"
                  message:
                    type: string
                    example: "must have at least one default address"            
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"                
  /v1/users/wishlists:
    get:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: Get all wishlist products
      description: Get all products in user wishlists with pagination, filter by category, minimun rating, price range, cities, and sort by recommended, latest, top sales, price low and price high
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Set to 10 by default
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: categoryId
          schema:
            type: integer
          description: Filter by categoryId
        - in: query
          name: minRating
          schema:
            type: integer
          description: Filter by minimum product rating to be shown (1-5)
        - in: query
          name: minPrice
          schema:
            type: number
            format: float
          description: Filter by minimum product price to be shown
        - in: query
          name: maxPrice
          schema:
            type: number
            format: float
          description: Filter by maximum product price to be shown
        - in: query
          name: cityIds
          schema:
            type: string
            example: 350,351
          description: Filter by product shop city id. For multiple ids, separate with comma (,)
        - in: query
          name: sort
          schema:
            type: string
            default: recommended
          description: Sort by "recommended", "latest", "top_sales", "price_low", "price_high"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      code:
                        example: 'OK'
                      message:
                        example: 'wishlists retrieved successfully'
                      data:
                        allOf:
                          - $ref: '#/components/schemas/PaginationResponse'
                          - type: object
                            properties:
                              data:
                                type: array
                                items:
                                  $ref: '#/components/schemas/UserWishlist'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
    post:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: Add product to wishlist
      description: Add product to wishlist
      requestBody:
        $ref: '#/components/requestBodies/AddWishlistBody'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      code:
                        example: 'CREATED'
                      message:
                        example: 'wishlist success created successfully'
                      data:
                        $ref: '#/components/schemas/UserWishlist'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "BAD_REQUEST"
                  message:
                    type: string
                    example: "error message"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"            
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "USER_NOT_FOUND"
                  message:
                    type: string
                    example: "error message"         
        '409':
          description: Product is already in wishlist
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "PRODUCT_ALREADY_IN_WISHLIST"
                  message:
                    type: string
                    example: "product is already in wishlist"            
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/users/wishlists/{productId}:
    get:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: Retrieve product in wishlist
      parameters:
        - in: path
          name: productId
          required: true
          description: Product code of the item to be retrieved from wishlist
          schema:
            type: integer
            example: 1
      description: Retrieve product in wishlist
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      code:
                        example: 'OK'
                      message:
                        example: 'wishlist retrieved successfully'
                      data:
                        $ref: '#/components/schemas/UserWishlist'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "BAD_REQUEST"
                  message:
                    type: string
                    example: "error message"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"            
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "USER_NOT_FOUND"
                  message:
                    type: string
                    example: "error message"                   
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
    delete:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: Retrieve product in wishlist
      parameters:
        - in: path
          name: productId
          required: true
          description: Product id of the item to be removed from wishlist
          schema:
            type: integer
            example: 1
      description: Remove product from wishlist
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      code:
                        example: 'OK'
                      message:
                        example: 'wishlist retrieved successfully'
                      data:
                        type: object
                        example: 
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "BAD_REQUEST"
                  message:
                    type: string
                    example: "error message"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"            
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "USER_NOT_FOUND"
                  message:
                    type: string
                    example: "error message"                   
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/products/{code}:
    get:
      tags:
        - Product
      summary: Get product by code
      description: Get product detail information using product code. If a product doesn't have any variant, `sku` field will appear while `variantGroup` field will not appear, vice versa
      parameters:
        - in: path
          name: code
          required: true
          schema:
            type: string
            example: product_code
      responses:
        '200':
          description: operation successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/Product'
                          - type: object
                            properties:
                              media:
                                type: array
                                items:
                                  $ref: '#/components/schemas/ProductMedia'
                          - type: object
                            properties:
                              bulk:
                                $ref: '#/components/schemas/ProductBulkPrice'
                          - type: object
                            properties:
                              totalStock:
                                type: integer
                                example: 100
                          - type: object
                            properties:
                              vouchers:
                                type: array
                                items:
                                  $ref: '#/components/schemas/ShopVoucher'
                          - type: object
                            properties:
                              couriers:
                                type: array
                                items:
                                  $ref: '#/components/schemas/Courier'
                          - type: object
                            properties:
                              variantGroups:
                                type: array
                                items:
                                  allOf:
                                    - $ref: '#/components/schemas/GroupVariant'
                                    - type: object
                                      properties:
                                        variants:
                                          type: array
                                          items:
                                            $ref: '#/components/schemas/Variant'
                          - type: object
                            properties:
                              shop:
                                $ref: '#/components/schemas/Shop'
                          - type: object
                            properties:
                              sku:
                                $ref: '#/components/schemas/SKU'
        '404':
          description: product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "PRODUCT_NOT_EXIST"
                  message:
                    type: string
                    example: "error message"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/products/{code}/reviews:
    get:
      tags:
        - Product
      summary: Get product reviews by code
      description: Get product reviews by product code
      parameters:
        - in: path
          name: code
          required: true
          schema:
            type: string
            example: product_code
        - in: query
          name: limit
          schema:
            type: integer
            default: 6
            maximum: 50
          description: Set to 6 by default and the maximum limit is 50.
        - in: query
          name: page
          schema:
            type: integer
            default: 1    
        - in: query
          name: filter
          schema:
            type: string
            enum: [5_star, 4_star, 3_star, 2_star, 1_star, with_picture, with_comment]    
      responses:
        '200':
          description: operation successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      code:
                        example: 'OK'
                      message:
                        example: "ok"
                      data:
                        allOf:
                        - $ref: '#/components/schemas/PaginationResponse'
                        - type: object
                          properties:
                            totalRows:
                              example: 1
                            totalPages:
                              example: 1
                            limit:
                              example: 10
                            data:
                              type: array
                              items:
                                allOf:
                                  - $ref: '#/components/schemas/ReviewResponse'
        '404':
          description: product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "PRODUCT_NOT_EXIST"
                  message:
                    type: string
                    example: "error message"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/products/{code}/reviews/stats:
    get:
      tags:
        - Product
      summary: Get product review stats by code
      description: Get product review stats by product code. The stats consists of average rating, total review count, five star count, four star count, three star count, two star count, one star count, with picture and with comment.
      parameters:
        - in: path
          name: code
          required: true
          schema:
            type: string
            example: product_code
      responses:
        '200':
          description: operation successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      code:
                        example: 'OK'
                      message:
                        example: "ok"
                      data:
                        allOf:
                        - type: object
                          properties:
                            data:
                              $ref: '#/components/schemas/GetReviewStatsReponse'
        '404':
          description: product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "PRODUCT_NOT_EXIST"
                  message:
                    type: string
                    example: "error message"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"                    
  /v1/products:
    post:
      security:
        - BearerAuth: []
      tags:
        - Product
      summary: Create product
      description: Create a new product
      requestBody:
        $ref: '#/components/requestBodies/CreateProductBody'
      responses:
        '201':
          description: product created
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: CREATED
                  message:
                    type: string
                    example: success message
                  data:
                    allOf:
                      - $ref: '#/components/schemas/Product'
                      - type: object
                        properties:
                          bulk:
                            $ref: '#/components/schemas/ProductBulkPrice'
                      - type: object
                        properties:
                          media:
                            $ref: '#/components/schemas/ProductMedia'
                      - type: object
                        properties:
                          skus:
                            type: array
                            items:
                              allOf:
                                - $ref: '#/components/schemas/SKU'
                                - type: object
                                  properties:
                                    variants:
                                      type: array
                                      items:
                                        $ref: '#/components/schemas/Variant'
                      - type: object
                        properties:
                          courierServices:
                            type: array
                            items:
                              $ref: '#/components/schemas/CourierService'
                      - type: object
                        properties:
                          variantGroups:
                            type: array
                            items:
                              allOf:
                                - $ref: '#/components/schemas/GroupVariant'
                                - type: object
                                  properties:
                                    variant:
                                      type: array
                                      items:
                                        $ref: '#/components/schemas/Variant'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "BAD_REQUEST"
                  message:
                    type: string
                    example: "error message"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "NOT_FOUND"
                  message:
                    type: string
                    example: "error message"
        '409':
          description: sku used
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "SKU_USED"
                  message:
                    type: string
                    example: "error message"
        '422':
          description: invalid product name pattern
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INVALID_PRODUCT_NAME"
                  message:
                    type: string
                    example: "error message"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
    get:
      tags:
        - Product
      summary: Get product by keyword and filter
      description: Get all products from keyword with pagination, filter by category, minimun rating, price range, cities, and sort by recommended, latest, top sales, price low and price high
      parameters:
        - in: query
          name: keyword
          schema:
            type: string
            example: "rtx"
        - in: query
          name: shop
          schema:
            type: string
            example: "shop"
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Set to 10 by default
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: categoryId
          schema:
            type: integer
          description: Filter by categoryId
        - in: query
          name: minRating
          schema:
            type: integer
          description: Filter by minimum product rating to be shown (1-5)
        - in: query
          name: minPrice
          schema:
            type: number
            format: float
          description: Filter by minimum product price to be shown
        - in: query
          name: maxPrice
          schema:
            type: number
            format: float
          description: Filter by maximum product price to be shown
        - in: query
          name: cityIds
          schema:
            type: string
            example: 350,351
          description: Filter by product shop city id. For multiple ids, separate with comma (,)
        - in: query
          name: sort
          schema:
            type: string
            default: recommended
          description: Sort by "recommended", "latest", "top_sales", "price_low", "price_high"
      responses:
        '200':
          description: Successfull operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      code:
                        example: 'OK'
                      message:
                        example: "ok"
                      data:
                        allOf:
                        - $ref: '#/components/schemas/PaginationResponse'
                        - type: object
                          properties:
                            totalRows:
                              example: 1
                            totalPages:
                              example: 1
                            limit:
                              example: 10
                            data:
                              type: array
                              items:
                                allOf:
                                  - $ref: '#/components/schemas/Product'
                                  - type: object
                                    properties:
                                      address:
                                        type: string
                                        example: Pekanbaru, Riau
                                  - type: object
                                    properties:
                                      imageUrl:
                                        type: string
        '404':
          description: shop not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "SHOP_NOT_FOUND"
                  message:
                    type: string
                    example: "error message"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/products/views:
    post:
      tags:
        - Product
      summary: Add product views
      description: Add product view using productId as request body
      requestBody:
        $ref: '#/components/requestBodies/AddProductViewRequestBody'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      code:
                        example: 'OK'
                      message:
                        example: 'ok'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "BAD_REQUEST"
                  message:
                    type: string
                    example: "error message"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "NOT_FOUND"
                  message:
                    type: string
                    example: "error message"            
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"                  
  /v1/products/autocompletes:
    get:
      tags:
        - Product
      summary: Get product name by keyword
      description: Get list of matched product name with keyword
      parameters:
        - in: query
          name: keyword
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                  allOf:
                    - $ref: '#/components/schemas/Response'
                    - type: object
                      properties:
                        code:
                          example: 'OK'
                        message:
                          example: 'success'
                        data:
                          type: array
                          items:
                            $ref: '#/components/schemas/Product'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"          
  /v1/products/categories:
    get:
      tags:
        - Product
      summary: Get all categories
      description: Get list of categories with filter by children depth and parent id, withPrice param, and pagination
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 0
          description: 'Return only level 1 categories if not specified'
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: parentId
          schema:
            type: integer
          description: Filter to get categories by category parent id
        - in: query
          name: depth
          schema:
            type: integer
            default: 0
          description: Filter of category's children depth
        - in: query
          name: withPrice
          schema:
            type: boolean
          description: Param to get category's least price
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      code:
                        example: 'OK'
                      message:
                        example: 'success'
                      data:
                        allOf:
                          - $ref: '#/components/schemas/PaginationResponse'
                          - type: object
                            properties:
                              data:
                                type: array
                                items:
                                  $ref: '#/components/schemas/Category'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/products/recommendations/categories:
    get:
      tags:
        - Product
      summary: Get product recommendation by categories
      description: Get product recommendation for product in the same category
      parameters:
        - in: query
          name: productId
          required: true
          schema:
            type: string
            example: "1"
        - in: query
          name: categoryId
          required: true
          schema:
            type: string
            example: "1"
      responses:
        '200':
          description: successful opearation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      code:
                        example: "OK"
                      message:
                        example: "ok"
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Product'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "BAD_REQUEST"
                  message:
                    type: string
                    example: "ProductId is required"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/shops:
    get:
      tags:
        - Shop
      summary: Find shop by keyword
      description: Find shop that match with the given keyword with pagination
      parameters:
        - in: query
          name: keyword
          schema:
            type: string
            example: "rtx"
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Set to 10 by default
        - in: query
          name: page
          schema:
            type: integer
            default: 1
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      code:
                        example: 'OK'
                      message:
                        example: 'success'
                      data:
                        allOf:
                          - $ref: '#/components/schemas/PaginationResponse'
                          - type: object
                            properties:
                              data:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    slug:
                                      type: string
                                      example: "slug"
                                    name:
                                      type: string
                                      example: "shop"
                                    productCount:
                                      type: number
                                      example: 2
                                    rating:
                                      type: number
                                      format: float
                                      example: 2.5
                                    photoUrl:
                                      type: string
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
             
  /v1/shops/{slug}:
    get:
      tags:
        - Shop
      summary: Get shop information
      description: Get shop information by slug
      parameters:
        - in: path
          name: slug
          description: Slug code of chosen shop
          required: true
          schema:
            type: string
            example: "shop"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      code:
                        example: "OK"
                      message:
                        example: "ok"
                      data:
                        allOf:
                          - $ref: '#/components/schemas/Shop'
                          - type: object
                            properties:
                              shopCategories:
                                type: array
                                items:
                                  $ref: '#/components/schemas/ShopCategory'
        '404':
          description: shop not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "SHOP_NOT_FOUND"
                  message:
                    type: string
                    example: "error message"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/shops/{slug}/products:
    get:
      tags:
        - Shop
      summary: Get shop product list
      description: Get all active products from given shop
      parameters:
        - in: path
          name: slug
          description: slug code for given shop
          required: true
          schema:
            type: string
            example: shop-slug
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
            example: 5
        - in: query
          name: page
          schema:
            type: integer
            default: 1
            example: 1
        - in: query
          name: sort
          description: shop product list sort method
          schema:
            type: string
            default: recommended
            enum: [recommended, latest, top_sales]
            example: recommended
        - in: query
          name: priceSort
          description: shop product list price sort method
          schema:
            type: string
            default: price_low
            enum: [price_low, price_high]
            example: price_low
        - in: query
          name: shopProductCategoryID
          description: shop category ID. If not defined then will get products from all categories
          schema:
            type: integer
            default: 0
            example: 0
        - in: query
          name: exceptionID
          description: product ID to hide from this list. If given, will get all product from given shop except product which has this ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      code:
                        type: string
                        example: OK
                      message:
                        type: string
                        example: success
                      data:
                        allOf:
                          - $ref: '#/components/schemas/PaginationResponse'
                          - type: object
                            properties:
                              data:
                                type: array
                                items:
                                  allOf:
                                    - $ref: '#/components/schemas/Product'
                                    - type: object
                                      properties:
                                        imageUrl:
                                          type: string
                                          example: http://example/image.png
                                    - type: object
                                      properties:
                                        totalStock:
                                          type: integer
                                          example: 100
        '404':
          description: shop not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "SHOP_NOT_REGISTERED"
                  message:
                    type: string
                    example: "error message"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/shops/visitors:
    post:
      tags:
        - Shop
      summary: Add shop visitor
      description: Add shop visitor using shopId as request body
      requestBody:
        $ref: '#/components/requestBodies/AddShopVisitorRequestBody'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      code:
                        example: 'CREATED'
                      message:
                        example: 'created'
                      data:
                        $ref: '#/components/schemas/ShopGuest'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "BAD_REQUEST"
                  message:
                    type: string
                    example: "error message"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "NOT_FOUND"
                  message:
                    type: string
                    example: "error message"                
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"  
        
  /v1/shops/{slug}/vouchers:
    get:
      tags:
        - Shop
      summary: Get shop voucher
      description: Get shop list of available vouchers
      parameters:
        - in: path
          name: slug
          description: Slug code of chosen shop
          required: true
          schema:
            type: string
            example: "shop"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      code:
                        example: "OK"
                      message:
                        example: "ok"
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/ShopVoucher'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "SHOP_NOT_REGISTERED"
                  message:
                    type: string
                    example: "shop not found"                      
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/shops/{slug}/vouchers/valid:
    get:
      security:
        - BearerAuth: []
      tags:
        - Shop
      summary: Get valid shop voucher
      description: Get shop list of valid user shop vouchers
      parameters:
        - in: path
          name: slug
          description: Slug code of chosen shop
          required: true
          schema:
            type: string
            example: "shop"
        - in: query
          name: code
          description: Voucher code
          schema:
            type: string
            example: "SECRET_VOUCHER"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      code:
                        example: "OK"
                      message:
                        example: "ok"
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/ShopVoucher'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "SHOP_NOT_REGISTERED"
                  message:
                    type: string
                    example: "shop not found"                     
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/shops/{slug}/couriers:
    get:
      security:
        - BearerAuth: []
      tags:
        - Shop
      summary: Get matching couriers
      description: Get a list of available couriers filtered by product id
      parameters:
        - in: path
          name: slug
          description: Slug code of chosen shop
          required: true
          schema:
            type: string
            example: "shop"
        - name: productId
          in: query
          description: Can receive multiple product id to filter couriers
          required: true
          schema:
            type: array
            items:
              type: integer    
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: OK
                  message:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Courier'
                        - type: object
                          properties:
                            services:
                              type: array
                              items:
                                $ref: '#/components/schemas/CourierService'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "SHOP_NOT_REGISTERED"
                  message:
                    type: string
                    example: "shop not found"                     
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"                  
  /v1/shops/profile:
    get:
      security:
        - BearerAuth: []
      tags:
        - Shop
      summary: Get shop profile
      description: Get shop name, logo, banner, and description
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: OK
                  message:
                    type: string
                    example: success
                  data:
                    $ref: '#/components/schemas/GetShopProfileResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "SHOP_NOT_REGISTERED"
                  message:
                    type: string
                    example: "shop not found"                     
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
    post:
      security:
        - BearerAuth: []
      tags:
        - Shop
      summary: Update shop profile
      description: Update shop name, logo, banner, and description
      requestBody:
        $ref: '#/components/requestBodies/UpdateShopProfileBody'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: OK
                  message:
                    type: string
                    example: success
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "BAD_REQUEST"
                  message:
                    type: string
                    example: "error message"                     
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "SHOP_NOT_REGISTERED"
                  message:
                    type: string
                    example: "shop not found"                     
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/users/sealabs-pays:
    get:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: Get user's sealabs-pay accounts
      description: Get list of user's sealabs-pay accounts
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/SealabsPay'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
    post:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: Register new SeaLabs Pay account
      description: Add new SeaLabs Pay to user account. A user can have more than 1 SeaLabs Pay
      requestBody:
        $ref: '#/components/requestBodies/RegisterSeaLabsPayBody'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      code:
                        example: 'CREATED'
                      message:
                        example: 'sealabs pay registered successfully'
                      data:
                        $ref: '#/components/schemas/SealabsPay'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "BAD_REQUEST"
                  message:
                    type: string
                    example: "error message"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '409':
          description: Duplicate SeaLabs Pay account
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "CARD_NUMBER_REGISTERED"
                  message:
                    type: string
                    example: "sealabs pay already registered"            
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/users/chats/{shopSlug}:
    get:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: As a user, retrieve chat with spesific shop
      description: As a user, retrieve chat with spesific shop by shop-slug identifier
      parameters:
        - in: query
          name: limitByDay
          schema:
            type: integer
            default: 366
          description: No default limit, will get chat from last 1 year calendar
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: No default page, will be set to 1
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      code:
                        example: 'SUCCESS'
                      message:
                        example: 'success'
                      data:
                        allOf:
                          - $ref: '#/components/schemas/PaginationResponse'
                          - type: object
                            properties:
                              data:
                                type: array
                                items:
                                  allOf:
                                    - $ref: '#/components/schemas/Chat'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "BAD_REQUEST"
                  message:
                    type: string
                    example: "error message"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "error message"        
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
    post:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: User send chat to seller
      description: User send chat to seller contains message and type of message
      requestBody:
        $ref: '#/components/requestBodies/ChatRequestBody'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      code:
                        example: 'CREATED'
                      message:
                        example: 'success'
                      data:
                        $ref: '#/components/schemas/Chat'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "BAD_REQUEST"
                  message:
                    type: string
                    example: "error message"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "error message"        
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/marketplaces/couriers:
    post:
      tags:
        - Marketplace
      summary: Add courier
      description: Add courier to marketplace
      requestBody:
        $ref: '#/components/requestBodies/AddCourierBody'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: OK
                  message:
                    type: string
                    example: success
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "BAD_REQUEST"
                  message:
                    type: string
                    example: "error message"                     
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "SHOP_NOT_REGISTERED"
                  message:
                    type: string
                    example: "shop not found"                     
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"


    get:
      security:
        - BearerAuth: []
      tags:
        - Marketplace
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: OK
                  message:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Courier'
                        - type: object
                          properties:
                            services:
                              type: array
                              items:
                                $ref: '#/components/schemas/CourierService'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"  
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/marketplaces/vouchers:
    get:
      tags:
        - Marketplace
      parameters:
        - in: query
          name: categoryId
          schema:
            type: integer
            default: 0
          description: No default category, will get all if not specified
        - in: query
          name: paymentMethodId
          schema:
            type: integer
            default: 0
          description: No default payment method, will get all if not specified
      summary: Get marketplace vouchers
      description: Get list of available marketplace vouchers
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      code:
                        example: "OK"
                      message:
                        example: "ok"
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/MarketplaceVoucher'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/marketplaces/vouchers/valid:
    get:
      security:
        - BearerAuth: []
      tags:
        - Marketplace
      parameters:
        - in: query
          name: categoryId
          schema:
            type: integer
            default: 0
          description: No default category, will get all if not specified
        - in: query
          name: paymentMethodId
          schema:
            type: integer
            default: 0
          description: No default payment method, will get all if not specified  
      summary: Get valid user marketplace vouchers
      description: Get list of valid user marketplace vouchers
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      code:
                        example: "OK"
                      message:
                        example: "ok"
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/MarketplaceVoucher'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"       
  /v1/sellers/register:
    post:
      security:
        - BearerAuth: []
      tags:
        - Seller
      summary: Register as a seller
      description: Register a shop to become a seller
      requestBody:
        $ref: '#/components/requestBodies/CreateShopBody'
      responses:
        '201':
          description: created
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: CREATED
                  message:
                    type: string
                    example: created
                  data:
                    allOf:
                      - $ref: '#/components/schemas/Shop'
                      - type: object
                        properties:
                          courierServices:
                            type: array
                            items:
                              $ref: '#/components/schemas/CourierService'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "BAD_REQUEST"
                  message:
                    type: string
                    example: "error message"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: SHOP_REGISTERED
                  message:
                    type: string
                    example: error message
        '422':
          description: invalid signature pattern
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INVALID_SHOP_NAME"
                  message:
                    type: string
                    example: "error message"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/sellers/couriers:
    get:
      security:
        - BearerAuth: []
      tags:
        - Seller
      summary: Get all couriers
      description: Get all available couriers
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      code:
                        example: "OK"
                      message:
                        example: "ok"
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            name:
                              type: string
                              example: "JNE"
                            code:
                              type: string
                              example: "jne"
                            isActive:
                              type: boolean
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"     
    post:
      security:
        - BearerAuth: []
      tags:
        - Seller
      summary: Toggle seller shipment courier
      description: Activate or deactivate shipment courier for seller
      requestBody:
        $ref: '#/components/requestBodies/ToggleSellerShipmenttBody'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      code:
                        example: "OK"
                      message:
                        example: "success"
                      data:
                        type: object
                        properties:
                          courierId:
                            type: integer
                          isToggled:
                            type: boolean
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "NOT_FOUND"
                  message:
                    type: string
                    example: "shop not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/sellers/products:
    get:
      security:
        - BearerAuth: []
      tags:
        - Seller
      summary: Get seller's products
      description: Get all seller's products
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
        - in: query
          name: sales
          description: minimum product sold. Only used if greater than 0
          schema:
            type: integer
            example: 10
        - in: query
          name: stock
          description: minimum product total stock. Only used if greater than 0
          schema:
            type: integer
            example: 100
        - in: query
          name: sort
          description: sort product. Any value (include not giving any value) other than listed below will use `latest`
          schema:
            type: string
            default: latest
            enum: [latest, top_sales, bottom_sales, stock_high, stock_low, price_high, price_low]
            example: latest
        - in: query
          name: status
          description: product status. Will return all products regardless of status when not given
          schema:
            type: string
            enum: [live, sold_out, delisted]
        - in: query
          name: sku
          schema:
            type: string
            example: product sku
        - in: query
          name: name
          schema:
            type: string
            example: product name
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      code:
                        example: "OK"
                      message:
                        example: "ok"
                      data:
                        allOf:
                          - $ref: '#/components/schemas/PaginationResponse'
                          - type: object
                            properties:
                              data:
                                type: array
                                items:
                                  allOf:
                                    - $ref: '#/components/schemas/Product'
                                    - type: object
                                      properties:
                                        imageUrl:
                                          type: string
                                          format: url
                                          example: image.png
                                    - type: object
                                      properties:
                                        bulk:
                                          $ref: '#/components/schemas/ProductBulkPrice'
                                    - type: object
                                      properties:
                                        skus:
                                          type: array
                                          items:
                                            allOf:
                                              - $ref: '#/components/schemas/SKU'
                                              - type: object
                                                properties:
                                                  variants:
                                                    type: array
                                                    items:
                                                      $ref: '#/components/schemas/Variant'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "NOT_FOUND"
                  message:
                    type: string
                    example: "error message"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/sellers/vouchers:
    get:
      security:
        - BearerAuth: []
      tags:
        - Seller
      summary: Get seller's vouchers
      description: Get all seller's vouchers
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
        - in: query
          name: status
          description: voucher status. Will return all vouchers regardless of status when not given
          schema:
            type: string
            enum: [ongoing, upcoming, expired]
        - in: query
          name: name
          schema:
            type: string
            example: voucher name
        - in: query
          name: code
          schema:
            type: string
            example: voucher code
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      code:
                        example: "OK"
                      message:
                        example: "ok"
                      data:
                        allOf:
                          - $ref: '#/components/schemas/PaginationResponse'
                          - type: object
                            properties:
                              data:
                                type: array
                                items:
                                  allOf:
                                    - $ref: '#/components/schemas/ShopVoucher'
                                    - type: object
                                      properties:
                                        status:
                                          type: string
                                          example: "ongoing"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "NOT_FOUND"
                  message:
                    type: string
                    example: "error message"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
    post:
      security:
        - BearerAuth: []
      tags:
        - Seller
      summary: Create seller's voucher
      description: Create a new seller's voucher
      requestBody:
        $ref: '#/components/requestBodies/CreateVoucherBody'
      responses:
        '201':
          description: voucher created
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: CREATED
                  message:
                    type: string
                    example: success message
                  data:
                    allOf:
                      - $ref: '#/components/schemas/ShopVoucher'
                        properties:
                          variantGroups:
                            type: array
                            items:
                              allOf:
                                - $ref: '#/components/schemas/GroupVariant'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "BAD_REQUEST"
                  message:
                    type: string
                    example: "error message"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "NOT_FOUND"
                  message:
                    type: string
                    example: "error message"
        '422':
          description: invalid voucher name pattern
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INVALID_VOUCHER_NAME"
                  message:
                    type: string
                    example: "error message"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"                
  /v1/sellers/vouchers/{code}:
    get:
      security:
        - BearerAuth: []
      tags:
        - Seller
      summary: Get seller voucher detail
      description: Get seller voucher detail by using voucher code
      parameters:
        - in: path
          name: code
          required: true
          schema:
            type: string
            example: voucher-code
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      code:
                        example: "OK"
                      message:
                        example: "ok"
                      data:
                        allOf:
                          - $ref: '#/components/schemas/ShopVoucher'
                          - type: object
                            properties:
                              status:
                                type: string
                                example: "ongoing"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "NOT_FOUND"
                  message:
                    type: string
                    example: "error message"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
    delete:
      security:
        - BearerAuth: []
      tags:
        - Seller
      summary: Delete seller's voucher
      description: Delete seller's voucher using voucher code. Cannot delete voucher that has an ongoing or expired status.
      parameters:
        - in: path
          name: code
          required: true
          description: Voucher Code of the voucher to be deleted
          schema:
            type: string
            example: "voucher-code"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "OK"
                  message:
                    type: string
                    example: "success"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "BAD_REQUEST"
                  message:
                    type: string
                    example: "error message"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"            
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "NOT_FOUND"
                  message:
                    type: string
                    example: "error message"         
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "VOUCHER_IS_EXPIRED_OR_ONGOING"
                  message:
                    type: string
                    example: "voucher status is either expired or ongoing"            
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"  
  /v1/sellers/products/{code}:
    get:
      security:
        - BearerAuth: []
      tags:
        - Seller
      summary: Get seller product detail
      description: Get seller product detail by using product code
      parameters:
        - in: path
          name: code
          required: true
          schema:
            type: string
            example: product-code
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      code:
                        example: "OK"
                      message:
                        example: "ok"
                      data:
                        allOf:
                          - $ref: '#/components/schemas/Product'
                          - type: object
                            properties:
                              media:
                                type: array
                                items:
                                  $ref: '#/components/schemas/ProductMedia'
                          - type: object
                            properties:
                              bulk:
                                $ref: '#/components/schemas/ProductBulkPrice'
                          - type: object
                            properties:
                              couriers:
                                type: array
                                items:
                                  $ref: '#/components/schemas/Courier'
                          - type: object
                            properties:
                              variantGroups:
                                type: array
                                items:
                                  allOf:
                                    - $ref: '#/components/schemas/GroupVariant'
                                    - type: object
                                      properties:
                                        variants:
                                          type: array
                                          items:
                                            $ref: '#/components/schemas/Variant'
                          - type: object
                            properties:
                              skus:
                                type: array
                                items:
                                  allOf:
                                    - $ref: '#/components/schemas/SKU'
                                    - type: object
                                      properties:
                                        variants:
                                          type: array
                                          items:
                                            $ref: '#/components/schemas/Variant'
                          - type: object
                            properties:
                              categories:
                                type: array
                                items:
                                  $ref: '#/components/schemas/Category'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "NOT_FOUND"
                  message:
                    type: string
                    example: "error message"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/sellers/products/{code}/activations:
    put:
      security:
        - BearerAuth: []
      tags:
        - Seller
      summary: Update product activation
      description: Update product activation (publish or delist)
      parameters:
        - in: path
          name: code
          required: true
          schema:
            type: string
            example: 'product-code'
      requestBody:
        $ref: '#/components/requestBodies/UpdateActivationRequestBody'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: UPDATED
                  message:
                    type: string
                    example: update successful
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "BAD_REQUEST"
                  message:
                    type: string
                    example: "error message"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "NOT_FOUND"
                  message:
                    type: string
                    example: "error message"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/sellers/finances/incomes/overviews:
    get:
      security:
        - BearerAuth: []
      tags:
        - Seller
      summary: Get finance income overview
      description: Get finance income overview data. Consists of amount of money which have been and have not been withdrawn.
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      code:
                        example: "OK"
                      message:
                        example: "ok"
                      data:
                        $ref: '#/components/schemas/SellerFinanceIncomeOverview'
        '404':
          description: shop not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "SHOP_NOT_REGISTERED"
                  message:
                    type: string
                    example: "error message"               
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/sellers/finances/incomes:
    get:
      security:
        - BearerAuth: []
      tags:
        - Seller
      summary: Get shop invoice per shop histories
      description: Get completed shop invoice per shop histories
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
        - in: query
          name: startDate
          description: startDate format is YYYY-MM-DD. If startDate is stated in the request, endDate should be stated as well
          schema:
            type: string
            format: date
            example: 2006-01-02
        - in: query
          name: endDate
          description: endDate format is YYYY-MM-DD. If endDate is stated in the request, startDate should be stated as well
          schema:
            type: string
            format: date
            example: 2006-01-02
        - in: query
          name: status
          description: withdraw status
          schema:
            type: string
            enum: ['released', 'to_release']
            example: released
        - in: query
          name: s
          description: search query (can be either product name, or invoice code)
          schema:
            type: string
            example: INV/
      responses:
        '200':
          description: operation successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/PaginationResponse'
                          - type: object
                            properties:
                              data:
                                type: array
                                items:
                                  allOf:
                                    - $ref: '#/components/schemas/InvoicePerShop'
                                    - type: object
                                      properties:
                                        shop:
                                          $ref: '#/components/schemas/Shop'
                                    - type: object
                                      properties:
                                        marketplaceVoucherAmount:
                                          type: number
                                          nullable: true
                                          format: float
                                          example: 0.1
                                    - type: object
                                      properties:
                                        marketplaceVoucherType:
                                          type: string
                                          nullable: true
                                          example: percent
                                    - type: object
                                      properties:
                                        paymentDate:
                                          type: string
                                          format: datetime
                                          example: "2006-01-02T00:00:00:000Z"
                                    - type: object
                                      properties:
                                        transactionItems:
                                          type: array
                                          items:
                                            allOf:
                                              - $ref: '#/components/schemas/Transaction'
                                              - type: object
                                                properties:
                                                  productName:
                                                    type: string
                                                    example: "product name"
                                              - type: object
                                                properties:
                                                  imageUrl:
                                                    type: string
                                                    format: url
                                                    example: http://example.image/test.png
                                              - type: object
                                                properties:
                                                  sku:
                                                    allOf:
                                                      - $ref: '#/components/schemas/SKU'
                                                      - type: object
                                                        properties:
                                                          variants:
                                                            type: array
                                                            items:
                                                              $ref: '#/components/schemas/Variant'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "BAD_REQUEST"
                  message:
                    type: string
                    example: "error message"
        '404':
          description: shop not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "NOT_FOUND"
                  message:
                    type: string
                    example: "shop not found"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/sellers/finances/incomes/{orderId}:
    get:
      security:
        - BearerAuth: []
      tags:
        - Seller
      summary: Get shop invoice per shop detail by id
      description: Get shop invoice per shop with id
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: operation successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/InvoicePerShop'
                          - type: object
                            properties:
                              shop:
                                $ref: '#/components/schemas/Shop'
                          - type: object
                            properties:
                              marketplaceVoucherAmount:
                                type: number
                                nullable: true
                                format: float
                                example: 0.1
                          - type: object
                            properties:
                              marketplaceVoucherType:
                                type: string
                                nullable: true
                                example: percent
                          - type: object
                            properties:
                              paymentDate:
                                type: string
                                format: datetime
                                example: "2006-01-02T00:00:00:000Z"
                          - type: object
                            properties:
                              transactionItems:
                                type: array
                                items:
                                  allOf:
                                    - $ref: '#/components/schemas/Transaction'
                                    - type: object
                                      properties:
                                        productName:
                                          type: string
                                          example: "product name"
                                    - type: object
                                      properties:
                                        imageUrl:
                                          type: string
                                          format: url
                                          example: http://example.image/test.png
                                    - type: object
                                      properties:
                                        sku:
                                          allOf:
                                            - $ref: '#/components/schemas/SKU'
                                            - type: object
                                              properties:
                                                variants:
                                                  type: array
                                                  items:
                                                    $ref: '#/components/schemas/Variant'
                                    
        '404':
          description: shop not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "NOT_FOUND"
                  message:
                    type: string
                    example: "shop not found"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"   
  /v1/sellers/finances/incomes/withdrawals:
    post:
      security:
        - BearerAuth: []
      tags:
        - Seller
      requestBody:
        $ref: '#/components/requestBodies/WithdrawInvoiceRequest'  
      summary: Withdraw money from an invoice
      description: Withdraw money using an orderId as the request body. Invoice can only be withdrawn once.
      responses:
        '200':
          description: operation successful
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      code:
                        example: OK
                      message:
                        example: success
        '400':
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "BAD_REQUEST"
                  message:
                    type: string
                    example: "error message"
        '404':
          description: shop not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "NOT_FOUND"
                  message:
                    type: string
                    example: "shop not found"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"                  
  /v1/sellers/stats:
    get:
      security:
        - BearerAuth: []
      tags:
        - Seller
      summary: Get shop stats
      description: Get shop orders' stats
      responses:
        '200':
          description: operation successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      code:
                        example: OK
                      message:
                        example: success
                      data:
                        $ref: '#/components/schemas/GetShopStatsResponse'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "BAD_REQUEST"
                  message:
                    type: string
                    example: "error message"
        '404':
          description: shop not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "NOT_FOUND"
                  message:
                    type: string
                    example: "shop not found"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/sellers/orders:
    get:
      security:
        - BearerAuth: []
      tags:
        - Seller
      summary: Get shop order list
      description: Get shop order list with pagination
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
        - in: query
          name: startDate
          description: startDate format is YYYY-MM-DD. If startDate is stated in the request, endDate should be stated as well
          schema:
            type: string
            format: date
            example: 2006-01-02
        - in: query
          name: endDate
          description: endDate format is YYYY-MM-DD. If endDate is stated in the request, startDate should be stated as well
          schema:
            type: string
            format: date
            example: 2006-01-02
        - in: query
          name: orderId
          description: search query for invoice code
          schema:
            type: string
            example: INV/
        - in: query
          name: product
          description: search query for product name
          schema:
            type: string
            example: RTX
        - in: query
          name: user
          description: search query for buyer username
          schema:
            type: string
            example: User.name
        - in: query
          name: track
          description: search query for tracking number
          schema:
            type: string
            example: 87410023923
      responses:
        '200':
          description: operation successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/PaginationResponse'
                          - type: object
                            properties:
                              data:
                                type: array
                                items:
                                  allOf:
                                    - $ref: '#/components/schemas/InvoicePerShop'
                                    - type: object
                                      properties:
                                        courierService:
                                          allOf:
                                            - $ref: '#/components/schemas/CourierService'
                                            - type: object
                                              properties:
                                                courier:
                                                  $ref: '#/components/schemas/Courier'
                                    - type: object
                                      properties:
                                        user:
                                          $ref: '#/components/schemas/User'
                                    - type: object
                                      properties:
                                        shop:
                                          $ref: '#/components/schemas/Shop'
                                    - type: object
                                      properties:
                                        marketplaceVoucherAmount:
                                          type: number
                                          nullable: true
                                          format: float
                                          example: 0.1
                                    - type: object
                                      properties:
                                        marketplaceVoucherType:
                                          type: string
                                          nullable: true
                                          example: percent
                                    - type: object
                                      properties:
                                        paymentDate:
                                          type: string
                                          format: datetime
                                          example: "2006-01-02T00:00:00:000Z"
                                    - type: object
                                      properties:
                                        transactionItems:
                                          type: array
                                          items:
                                            allOf:
                                              - $ref: '#/components/schemas/Transaction'
                                              - type: object
                                                properties:
                                                  productName:
                                                    type: string
                                                    example: "product name"
                                              - type: object
                                                properties:
                                                  imageUrl:
                                                    type: string
                                                    format: url
                                                    example: http://example.image/test.png
                                              - type: object
                                                properties:
                                                  sku:
                                                    allOf:
                                                      - $ref: '#/components/schemas/SKU'
                                                      - type: object
                                                        properties:
                                                          variants:
                                                            type: array
                                                            items:
                                                              $ref: '#/components/schemas/Variant'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "BAD_REQUEST"
                  message:
                    type: string
                    example: "error message"
        '404':
          description: shop not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "NOT_FOUND"
                  message:
                    type: string
                    example: "shop not found"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/sellers/insights:
    get:
      security:
        - BearerAuth: []
      tags:
        - Seller
      summary: Get shop insight
      description: Get shop total visitor, page view, order, and sales activity
      parameters:
        - in: query
          name: timeframe
          schema:
            type: string
            example: day/week/month
      responses:
        '200':
          description: operation successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      code:
                        example: OK
                      message:
                        example: success
                      data:
                        $ref: '#/components/schemas/GetShopInsightResponse'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "BAD_REQUEST"
                  message:
                    type: string
                    example: "error message"
        '404':
          description: shop not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "NOT_FOUND"
                  message:
                    type: string
                    example: "shop not found"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/sellers/orders/{orderId}:
    get:
      security:
        - BearerAuth: []
      tags:
        - Seller
      summary: Get shop order detail
      description: Get shop order detail by id
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: operation successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                          allOf:
                            - $ref: '#/components/schemas/InvoicePerShop'
                            - type: object
                              properties:
                                courierService:
                                  allOf:
                                    - $ref: '#/components/schemas/CourierService'
                                    - type: object
                                      properties:
                                        courier:
                                          $ref: '#/components/schemas/Courier'
                            - type: object
                              properties:
                                user:
                                  $ref: '#/components/schemas/User'
                            - type: object
                              properties:
                                shop:
                                  $ref: '#/components/schemas/Shop'
                            - type: object
                              properties:
                                address:
                                  $ref: '#/components/schemas/UserAddress'
                            - type: object
                              properties:
                                marketplaceVoucherAmount:
                                  type: number
                                  nullable: true
                                  format: float
                                  example: 0.1
                            - type: object
                              properties:
                                marketplaceVoucherType:
                                  type: string
                                  nullable: true
                                  example: percent
                            - type: object
                              properties:
                                paymentDate:
                                  type: string
                                  format: datetime
                                  example: "2006-01-02T00:00:00:000Z"
                            - type: object
                              properties:
                                statusList:
                                  type: array
                                  items:
                                    $ref: '#/components/schemas/InvoiceStatus'
                            - type: object
                              properties:
                                transactionItems:
                                  type: array
                                  items:
                                    allOf:
                                      - $ref: '#/components/schemas/Transaction'
                                      - type: object
                                        properties:
                                          productName:
                                            type: string
                                            example: "product name"
                                      - type: object
                                        properties:
                                          imageUrl:
                                            type: string
                                            format: url
                                            example: http://example.image/test.png
                                      - type: object
                                        properties:
                                          sku:
                                            allOf:
                                              - $ref: '#/components/schemas/SKU'
                                              - type: object
                                                properties:
                                                  variants:
                                                    type: array
                                                    items:
                                                      $ref: '#/components/schemas/Variant'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "BAD_REQUEST"
                  message:
                    type: string
                    example: "error message"
        '404':
          description: shop not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "NOT_FOUND"
                  message:
                    type: string
                    example: "shop not found"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/sellers/orders/{orderId}/delivery:
    put:
      security:
        - BearerAuth: []
      tags:
        - Seller
      summary: Change invoice status to delivery
      description: Change invoice status from created to delivery
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        example: null
        '404':
          description: shop not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "NOT_FOUND"
                  message:
                    type: string
                    example: "shop not found"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
                  
  /v1/sellers/orders/{orderId}/cancel:
    put:
      security:
        - BearerAuth: []
      tags:
        - Seller
      summary: Change invoice status to canceled
      description: Change invoice status from created to canceled
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        example: null
        '404':
          description: shop not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "NOT_FOUND"
                  message:
                    type: string
                    example: "shop not found"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/admins/login:
    post:
      tags:
        - Admin
      summary: Admin login
      description: Admin login with email and password to get token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      code:
                        example: 'OK'
                      message:
                        example: 'ok'
                      data:
                        $ref: '#/components/schemas/Token'
        '400':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "BAD_REQUEST"
                  message:
                    type: string
                    example: "error message"  
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/admins/orders/{orderId}/cancel-commit:
    post:
      security:
        - BearerAuth: []
      tags:
        - Admin
      summary: Process a cancel request from seller
      description: Process a canceled order from seller, returning money to user's wallet, restore quantity and change status to refunded.
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: integer       
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      code:
                        example: 'OK'
                      message:
                        example: 'ok'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"  
        '404':
          description: invoice not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "NOT_FOUND"
                  message:
                    type: string
                    example: "invoice not found"            
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/sellers/ratings:
    get:
      security:
        - BearerAuth: []
      tags:
        - Seller
      summary: Get shop rating
      description: Get shop rating from the product that has been reviewed
      parameters:
        - in: query
          name: search
          required: false
          schema:
            type: string
            example: "VGA"
        - in: query
          name: page
          required: false
          schema:
            type: integer
            example: 1
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            example: 10
        - in: query
          name: filter
          required: false
          schema:
            type: integer
            example: 1
        - in: query
          name: startDate
          required: false
          schema:
            type: string
            example: "2020-01-01"
        - in: query
          name: endDate
          required: false
          schema:
            type: string
            example: "2020-01-01"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        type : object
                        properties:
                          shopRating:
                            type: integer
                            example: 1
                          data:
                            type: array
                            items:
                              allOf:
                                - type: object
                                  properties:
                                    userName:
                                      type: string
                                      example: "user name"
                                - type: object
                                  properties:
                                    userUrl:
                                      type: string
                                      format: url
                                      example: http://example.user/test.png
                                - type: object
                                  properties:
                                    orderId:
                                      type: string
                                      example: "345678"
                                - type: object
                                  properties:
                                    productUrl:
                                      type: string
                                      format: url
                                      example: http://example.product/test.png
                                - type: object
                                  properties:
                                    productName:
                                      type: string
                                      example: "product name"
                                - type: object
                                  properties:
                                    productRating:
                                      type: integer
                                      example: 1
                                - type: object
                                  properties:
                                    productReview:
                                      type: string
                                      example: "product review"
                                - type: object
                                  properties:
                                    reviewMedia:
                                      type: array
                                      items:
                                        type: string
                                        example: ["http://example.review/test1.png", "http://example.review/test2.png"]
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"

  /v1/sellers/orders/{orderId}/cancel-request:
    post:
      security:
        - BearerAuth: []
      tags:
        - Seller
      summary: Cancel an incoming order
      description: Cancel an incoming order using orderId
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: integer       
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      code:
                        example: 'OK'
                      message:
                        example: 'ok'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"  
        '404':
          description: shop not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "NOT_FOUND"
                  message:
                    type: string
                    example: "shop not found"            
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/sellers/orders/{orderId}/refund:
    put:
      security:
        - BearerAuth: []
      tags:
        - Order
      summary: Approve or reject refund request
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: integer
            example: 1
      description: Update refund status to 'SELLER_APPROVED' or 'REJECTED'
      requestBody: 
        $ref: '#/components/requestBodies/UpdateRefundStatusBody'
      responses:
        '200':
          description: Successful operation
          content: 
            application/json:
              schema:
                  type: object
                  properties:
                      code:
                        example: 'OK'
                      message:
                        example: 'refund status updated'             
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "BAD_REQUEST"
                  message:
                    type: string
                    example: "error message"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"  
        '404':
          description: Record not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "NOT_FOUND"
                  message:
                    type: string
                    example: "error message"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"     
  /v1/sellers/chats/{username}:
    get:
      security:
        - BearerAuth: []
      tags:
        - Seller
      summary: As a seller, retrieve chat with spesific user
      description: As a seller, retrieve chat with spesific user by username identifier
      parameters:
        - in: query
          name: limitByDay
          schema:
            type: integer
            default: 366
          description: No default limit, will get chat from last 1 year calendar
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: No default page, will be set to 1
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      code:
                        example: 'SUCCESS'
                      message:
                        example: 'success'
                      data:
                        allOf:
                          - $ref: '#/components/schemas/PaginationResponse'
                          - type: object
                            properties:
                              data:
                                type: array
                                items:
                                  allOf:
                                    - $ref: '#/components/schemas/Chat'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "BAD_REQUEST"
                  message:
                    type: string
                    example: "error message"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "error message"        
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
    post:
      security:
        - BearerAuth: []
      tags:
        - Seller
      summary: Seller send chat to user
      description: Seller send chat to user contains message
      requestBody:
        $ref: '#/components/requestBodies/ChatRequestBody'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      code:
                        example: 'CREATED'
                      message:
                        example: 'success'
                      data:
                        $ref: '#/components/schemas/Chat'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "BAD_REQUEST"
                  message:
                    type: string
                    example: "error message"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "error message"        
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"                               
  /v1/orders/invoices:
    post:
      security:
        - BearerAuth: []
      tags:
        - Order
      summary: Pay invoice
      description: Pay invoice with status 'WAITING_FOR_PAYMENT' using SeaLabs Pay or user wallet
      requestBody:
        $ref: '#/components/requestBodies/PayInvoiceBody'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      code:
                        example: 'CREATED'
                      message:
                        example: 'invoice created successfully'
                      data:
                        $ref: '#/components/schemas/Token'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "BAD_REQUEST"
                  message:
                    type: string
                    example: "error message"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '402':
          description: payment required. returned when payment method is using sealabs pay but signature doesn't match
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "PAYMENT_REQUIRED"
                  message:
                    type: string
                    example: "payment required"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
    get:
      security:
        - BearerAuth: []
      tags:
        - Order
      summary: Get user invoice per shop histories
      description: Get user invoice per shop histories
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
        - in: query
          name: status
          description: invoice status. Any other value than those defined below will be set `''` (all)
          schema:
            type: string
            default: ''
            enum: ['', 'COMPLETED', 'CREATED', 'SENT', 'RECEIVED', 'COMPLAINED', 'COMPLAINT_CONFIRMED', 'COMPLAINT_REJECTED', 'CANCELED']
        - in: query
          name: startDate
          description: startDate format is YYYY-MM-DD. If startDate is stated in the request, endDate should be stated as well
          schema:
            type: string
            format: date
            example: 2006-01-02
        - in: query
          name: endDate
          description: endDate format is YYYY-MM-DD. If endDate is stated in the request, startDate should be stated as well
          schema:
            type: string
            format: date
            example: 2006-01-02
        - in: query
          name: s
          description: search query (can be either shop name, product name, or invoice code)
          schema:
            type: string
            example: INV/
      responses:
        '200':
          description: operation successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/PaginationResponse'
                          - type: object
                            properties:
                              data:
                                type: array
                                items:
                                  allOf:
                                    - $ref: '#/components/schemas/InvoicePerShop'
                                    - type: object
                                      properties:
                                        shop:
                                          $ref: '#/components/schemas/Shop'
                                    - type: object
                                      properties:
                                        marketplaceVoucherAmount:
                                          type: number
                                          nullable: true
                                          format: float
                                          example: 0.1
                                    - type: object
                                      properties:
                                        marketplaceVoucherType:
                                          type: string
                                          nullable: true
                                          example: percent
                                    - type: object
                                      properties:
                                        paymentDate:
                                          type: string
                                          format: datetime
                                          example: "2006-01-02T00:00:00:000Z"
                                    - type: object
                                      properties:
                                        transactionItems:
                                          type: array
                                          items:
                                            allOf:
                                              - $ref: '#/components/schemas/Transaction'
                                              - type: object
                                                properties:
                                                  productName:
                                                    type: string
                                                    example: "product name"
                                              - type: object
                                                properties:
                                                  imageUrl:
                                                    type: string
                                                    format: url
                                                    example: http://example.image/test.png
                                              - type: object
                                                properties:
                                                  sku:
                                                    allOf:
                                                      - $ref: '#/components/schemas/SKU'
                                                      - type: object
                                                        properties:
                                                          variants:
                                                            type: array
                                                            items:
                                                              $ref: '#/components/schemas/Variant'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "BAD_REQUEST"
                  message:
                    type: string
                    example: "error message"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"                          
  /v1/orders/transactions/{transactionId}/reviews:
    get:
      tags:
        - Order
      security:
        - BearerAuth: []
      summary: Get transaction review by transaction ID
      description: Get user transaction review by transaction ID
      parameters:
        - in: path
          name: transactionId
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      code:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      message:
                        type: string
                        example: success
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/TransactionReview'
        '400':
          description: invalid transaction id
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "BAD_REQUEST"
                  message:
                    type: string
                    example: "error message"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "NOT_FOUND"
                  message:
                    type: string
                    example: "error message"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/orders/invoices/{code}:
    get:
      tags:
        - Order
      security:
        - BearerAuth: []
      summary: Get user shop invoice by invoice code
      description: Get user shop invoice using invoice code
      parameters:
        - in: path
          name: code
          required: true
          description: all slash (`/`) in invoice code should be encoded to hypen (`-`)
          schema:
            type: string
            example: INV-XX-X
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/InvoicePerShop'
                          - type: object
                            properties:
                              shop:
                                $ref: '#/components/schemas/Shop'
                          - type: object
                            properties:
                              statusList:
                                type: array
                                items:
                                  $ref: '#/components/schemas/InvoiceStatus'
                          - type: object
                            properties:
                              marketplaceVoucherAmount:
                                type: number
                                nullable: true
                                format: float
                                example: 0.1
                          - type: object
                            properties:
                              marketplaceVoucherType:
                                type: string
                                nullable: true
                                example: percent
                          - type: object
                            properties:
                              paymentDate:
                                type: string
                                format: datetime
                                example: "2006-01-02T00:00:00:000Z"
                          - type: object
                            properties:
                              address:
                                $ref: '#/components/schemas/UserAddress'
                          - type: object
                            properties:
                              transactionItems:
                                type: array
                                items:
                                  allOf:
                                    - $ref: '#/components/schemas/Transaction'
                                    - type: object
                                      properties:
                                        productName:
                                          type: string
                                          example: "product name"
                                    - type: object
                                      properties:
                                        imageUrl:
                                          type: string
                                          format: url
                                          example: http://example.image/test.png
                                    - type: object
                                      properties:
                                        sku:
                                          allOf:
                                            - $ref: '#/components/schemas/SKU'
                                            - type: object
                                              properties:
                                                variants:
                                                  type: array
                                                  items:
                                                    $ref: '#/components/schemas/Variant'
                                    - type: object
                                      properties:
                                        courierService:
                                          allOf:
                                            - $ref: '#/components/schemas/CourierService'
                                            - type: object
                                              properties:
                                                courier:
                                                  $ref: '#/components/schemas/Courier'
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "NOT_FOUND"
                  message:
                    type: string
                    example: "error message"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"   
  /v1/orders/invoices/{code}/receive:
    put:
      security:
        - BearerAuth: []
      tags:
        - Order
      summary: Change invoice status to received
      description: Change invoice status from delivered to received
      parameters:
        - in: path
          name: code
          required: true
          description: all slash (`/`) in invoice code should be encoded to hypen (`-`)
          schema:
            type: string
            example: INV-XX-X
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        example: null
        '404':
          description: invoice not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "NOT_FOUND"
                  message:
                    type: string
                    example: "invoice not found"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/orders/invoices/{code}/complete:
    put:
      security:
        - BearerAuth: []
      tags:
        - Order
      summary: Change invoice status to completed
      description: Change invoice status from received to completed
      parameters:
        - in: path
          name: code
          required: true
          description: all slash (`/`) in invoice code should be encoded to hypen (`-`)
          schema:
            type: string
            example: INV-XX-X
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        example: null
        '404':
          description: invoice not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "NOT_FOUND"
                  message:
                    type: string
                    example: "invoice not found"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/orders/invoices/{code}/refund:
    post:
      security:
        - BearerAuth: []
      tags:
        - Order
      summary: Change invoice status to complained
      description: Change invoice status from received to complained
      parameters:
        - in: path
          name: code
          required: true
          description: all slash (`/`) in invoice code should be encoded to hypen (`-`)
          schema:
            type: string
            example: INV-XX-X
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/RefundRequest'
                          - type: object
                            properties:
                              invoice:
                                allOf:
                                  - $ref: '#/components/schemas/InvoicePerShop'
                                  - type: object
                                    properties:
                                      shop:
                                        $ref: '#/components/schemas/Shop'
                                  - type: object
                                    properties:
                                      statusList:
                                        type: array
                                        items:
                                          $ref: '#/components/schemas/InvoiceStatus'
                                  - type: object
                                    properties:
                                      marketplaceVoucherAmount:
                                        type: number
                                        nullable: true
                                        format: float
                                        example: 0.1
                                  - type: object
                                    properties:
                                      marketplaceVoucherType:
                                        type: string
                                        nullable: true
                                        example: percent
                                  - type: object
                                    properties:
                                      paymentDate:
                                        type: string
                                        format: datetime
                                        example: "2006-01-02T00:00:00:000Z"
                                  - type: object
                                    properties:
                                      address:
                                        $ref: '#/components/schemas/UserAddress'
                                  - type: object
                                    properties:
                                      courierService:
                                        allOf:
                                          - $ref: '#/components/schemas/CourierService'
                                          - type: object
                                            properties:
                                              courier:
                                                $ref: '#/components/schemas/Courier'
                        
        '404':
          description: invoice not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "NOT_FOUND"
                  message:
                    type: string
                    example: "invoice not found"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "invalid credential"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/orders:
    post:
      tags:
        - Order
      security:
        - BearerAuth: []
      summary: Checkout
      description: Create order to be paid later by user
      requestBody:
        $ref: '#/components/requestBodies/CheckoutBody'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      code:
                        type: string
                        example: CREATED
                  - type: object
                    properties:
                      message:
                        type: string
                        example: checkout success
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id:
                            type: integer
        '400':
          description: invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "BAD_REQUEST"
                  message:
                    type: string
                    example: "error message"
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "NOT_FOUND"
                  message:
                    type: string
                    example: "error message"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"
  /v1/orders/invoices/cancel:
    post:
      tags:
        - Order
      security:
        - BearerAuth: []
      summary: Cancel checkout
      description: Cancel checkout to remove pre-inserted order when user failed to pay, update their order, or cancel their order
      requestBody:
        $ref: '#/components/requestBodies/CancelCheckoutBody'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: OK
                  message:
                    type: string
                    example: cancel checkout success
        '400':
          description: invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "BAD_REQUEST"
                  message:
                    type: string
                    example: "error message"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "error message"                   
components:
  schemas:
    Chat:
      type: object
      properties:
        id:
          type: number
          example: 1
        message:
          type: string
          example: "Ada apa sayang"
        time:
          type: string
          example: "2023-03-23T09:36:13.333895Z"
        type:
          type: string
          example: complaint
        isIncoming:
          type: boolean
          example: false
    User:
      type: object
      properties:
        id:
          type: number
          example: 1
        email:
          type: string
          format: email
          example: user@email.com
        username:
          type: string
          example: user_name
        profile:
          $ref: '#/components/schemas/UserProfile'
    UserProfile:
      type: object
      properties:
        id:
          type: number
          example: 1
        name:
          type: string
          example: user
        phoneNumber:
          type: string
          example: 0123456789
        dob:
          type: string
          format: date
          example: "2006-01-02T:00:00:00Z"
        gender:
          type: string
          example: male
        photoUrl:
          type: string
          example: http://photo.url.com
        userId:
          type: number
          example: 1
        defaultAddressId:
          type: number
          example: 1
    Shop:
      type: object
      properties:
        id: 
          type: integer
          example: 1
        name:
          type: string
          example: user shop
        rating:
          type: integer
          format: float
          example: 4.9
        joinedDate:
          type: string
          format: datetime
          example: "2006-01-02T00:00:00Z"
        description:
          type: string
          example: shop description
        photoUrl:
          type: string
          format: url
          example: image.png
        userId:
          type: integer
          example: 1
        slug:
          type: string
          example: "user-shop"
    ShopCategory:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "electronics"
        shopId:
          type: integer
          example: 1
    ShopVoucher:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "voucher"
        code:
          type: string
          example: "code"
        amount:
          type: number
          format: float
          example: 50000
        type:
          type: string
          example: "nominal"
        isHidden:
          type: boolean
          example: false
        description:
          type: string
          example: "desc"
        minimumSpend:
          type: number
          format: float
          example: 100000
        usedQuota:
          type: number
          example: 5
        totalQuota:
          type: number
          example: 50
        startFrom:
          type: string
          format: dateTime
          example: "2006-03-19T00:00:00Z"
        expiredAt:
          type: string
          format: dateTime
          example: "2023-03-20T00:00:00Z"
        shopId:
          type: number
          example: 1
    MarketplaceVoucher:
      type: object
      properties:
        id:
          type: integer
          example: 2
        code:
          type: string
          example: "code"
        name:
          type: string
          example: "voucher"
        amount:
          type: number
          format: float
          example: 50000
        type:
          type: string
          example: "nominal"
        isHidden:
          type: boolean
          example: false
        description:
          type: string
          example: "desc"
        minimumSpend:
          type: number
          format: float
          example: 100000
        expiredAt:
          type: string
          format: dateTime
          example: "2006-01-02T00:00:00Z"
        categoryId:
          type: integer
          example: 1
        paymentMethodId:
          type: integer
          example: 2
    Token:
      type: object
      properties:
        accessToken:
          type: string
          example: "thisIsToken"
        refreshToken:
          type: string
          example: "thisIsToken"
    Province:
      type: object
      properties:
        id:
          type: integer
          example: 11
        name:
          type: string
          example: 'Banten'
    City:
      type: object
      properties:
        id:
          type: integer
          example: 152
        name:
          type: string
          example: 'Jakarta Pusat'
        provinceId:
          type: integer
          example: 6
    District:
      type: object
      properties:
        id:
          type: integer
          example: 4351
        name:
          type: string
          example: 'Driyorejo'
        cityId:
          type: integer
          example: 133
    Subdistrict:
      type: object
      properties:
        id:
          type: integer
          example: 27
        name:
          type: string
          example: 'Banjaran'
        districtId:
          type: integer
          example: 4351
        postalCode:
          type: string
          example: 61177
          
    Wallet:
      type: object
      properties:
        id:
          type: integer
          example: 1
        userId:
          type: integer
          example: 1
        balance:
          type: integer
    WalletHistory:
      type: object
      properties:
        id:
          type: integer
          example: 1
        type:
          type: string
          example: "Top-up"
        reference:
          type: string
          example: 192388482000
        date:
          type: string
          format: datetime
          example: 2006-02-01
        amount:
          type: number
          format: float
          example: 50000
        walletId:
          type: integer
          example: 1
    Category:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'Fashion'
        imageUrl:
          type: string
        minPrice:
          type: number
          format: float
          example: 100000
        parentId:
          type: integer
        children:
          type: array
          items: {}
          example: []
    Response:
      type: object
      properties:
        code:
          type: string
          example: CODE
        message:
          type: string
          example: message
        data:
          type: any
    PaginationResponse:
      type: object
      properties:
        data:
         type: any
        totalRows:
          type: integer
          example: 1
        totalPages:
          type: integer
          example: 1
        limit:
          type: integer
          example: 10
        page:
          type: integer
          example: 1
    Product:
      type: object
      properties:
        id:
          type: integer
          example: 1
        code:
          type: string
          example: ITEM-001
        name:
          type: string
          example: VGA MSI GeForce RTX 409
        description:
          type: string
        view:
          type: integer
        isHazardous:
          type: boolean
        weight:
          type: number
          format: float
        length:
          type: number
          format: float
        width:
          type: number
          format: float
        height:
          type: number
          format: float
        isNew:
          type: boolean
        isActive:
          type: boolean
        rating:
          type: number
          format: float
        sold:
          type: integer
        minPrice:
          type: number
          format: float
        maxPrice:
          type: number
          format: float
        promotionPercent:
          type: number
          format: float
          example: 0.16
        shopId:
          type: integer
        categoryId:
          type: integer
    ProductMedia:
      type: object
      properties:
        id:
          type: integer
          example: 1
        url:
          type: string
          format: url
          example: image.png
        productId:
          type: integer
          example: 1
    ProductBulkPrice:
      type: object
      properties:
        id:
          type: integer
          example: 1
        minQuantity:
          type: integer
          example: 10
        price:
          type: number
          format: float
          example: 1000
        productId:
          type: integer
          example: 1
    UserWishlist:
      type: object
      properties:
        id:
          type: integer
          example: 1
        userId:
          type: integer
          example: 1
        productId:
          type: integer
          example: 1
        product:
          allOf:
            - $ref: '#/components/schemas/Product'
            - type: object
              properties:
                address:
                  type: string
                  example: Pekanbaru, Riau
            - type: object
              properties:
                imageUrl:
                  type: string
            - type: object
              properties:
                defaultSkuId:
                  type: integer
                  example: 1
    CartItem:
      type: object
      properties:
        id:
          type: integer
          example: 1
        quantity:
          type: integer
          example: 1   
        notes:
          type: string
          example: this is note
        skuId:
          type: integer
          example: 1
    CartItemResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        quantity:
          type: integer
          example: 1   
        notes:
          type: string
          example: this is note
        skuId:
          type: integer
          example: 1
        name:
          type: string
          example: Bakmi
        stock:
          type: integer
          example: 29
        variants:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Variant'
              - type: object
                properties:
                  group:
                    $ref: '#/components/schemas/GroupVariant'
        originalPrice:
          type: number
          format: float64
          example: 500000
        promotionType:
          type: string
          example: nominal
        promotionAmount:
          type: number
          format: float64
          example: 5000
        weight:
          type: number
          format: float64
          description: weight of product in grams (g))
          example: 500
        width:
          type: number
          format: float64
          description: width in centimeters (cm)
          example: 20
        height:
          type: number
          format: float64
          description: height in centimeters (cm)
          example: 20
        length:
          type: number
          format: float64
          description: length in centimeters (cm)
          example: 20  
    CartItemShopResponse:
      type: object
      properties: 
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Bakmi Acong
        rating:
          type: integer
          example: 5
        joinedDate:
          type: string
          example: "2006-01-02T00:00:00Z"
          format: datetime
        address:
          type: string
          example: Pekanbaru, Riau
        slug:
          type: string
          example: bakmi-acong
        postalCode:
          type: string
          example: 28292
    Variant:
      type: object
      properties:
        id:
          type: integer
          example: 1
        value:
          type: string
          example: Blue
        mediaUrl:
          type: string
          example: test.com/image.jpg
        groupId:
          type: integer
          example: 1
    GroupVariant:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Color
        productId:
          type: integer
          example: 1
    SKU:
      type: object
      properties:
        id:
          type: integer
          example: 1
        sku:
          type: string
          example: product_sku
        price:
          type: number
          format: float
          example: 20000
        stock:
          type: integer
          example: 100
        productId:
          type: integer
          example: 2
    Courier:
      type: object
      properties:
        id:
          type: integer
          example: 1
        code:
          type: string
          example: courier_code
        name:
          type: string
          example: courier name
    CourierService:
      type: object
      properties:
        id:
          type: integer
          example: 1
        code:
          type: string
          example: service_code
        name:
          type: string
          example: service name
        courierId:
          type: integer
          example: 1
        minDuration:
          type: integer
          example: 86400
        maxDuration:
          type: integer
          example: 172800
    ShopGuest:
      type: object
      properties:
        uuid:
          type: string
          example: c37e6555-da88-4f1f-b75c-8f9caab85b01
          format: uuid
        shopId:
          type: integer
          example: 1
    UserAddress:
      type: object
      properties:
        id:
          type: integer
          example: 1
        userId:
          type: integer
          example: 101
        name:
          type: string
          example: John
        phoneNumber:
          type: string
          example: 012314213
        street:
          type: string
          example: Jalan kamboja 123
        details:
          type: string
          example: sopo del
        subdistrictId:
          type: integer
          example: 27
        subdistrict:
          $ref: '#/components/schemas/Subdistrict'
        districtId:
          type: integer
          example: 4351
        district:
          $ref: '#/components/schemas/District'
        cityId:
          type: integer
          example: 133
        city:
          $ref: '#/components/schemas/City'
        provinceId:
          type: integer
          example: 11
        province:
          $ref: '#/components/schemas/Province'
        isDefault:
          type: boolean
          example: true
    TransactionReview:
      type: object
      properties:
        id:
          type: integer
          example: 1
        description:
          type: string
          example: Good!
        rating:
          example: 2
          type: integer
        transactionId:
          type: integer
          example: 1
        reviewMedias:
          type: array
          items:
            $ref: '#/components/schemas/ReviewMedia'
    ReviewMedia:
      type: object
      properties:
        id:
          type: integer
          example: 1
        url:
          type: string
          example: image.jpg
        reviewId:
          type: integer
          example: 1
    SealabsPay:
      type: object
      properties:
        id:
          type: integer
          example: 1
        cardNumber:
          type: string
          format: numeric
          example: 2795790398762135
        cardName:
          type: string
          example: Marco Loen
        expiryDate:
          type: string
          example: '2024-12-31T00:00:00Z'
    InvoicePerShop:
      type: object
      properties:
        id:
          type: integer
          example: 1
        code:
          type: string
          example: INV/XX/X
        subtotal:
          type: number
          format: float
          example: 10000
        total:
          type: number
          format: float
          example: 10000
        shippingCost:
          type: number
          format: float
          example: 1000
        trackingNumber:
          type: string
          example: 123
        voucherAmount:
          type: number
          format: float
          nullable: true
          example: 1000
        voucherType:
          type: string
          nullable: true
          example: nominal
        status:
          type: string
          example: COMPLETED
        shopId:
          type: integer
          example: 1
        userId:
          type: integer
          example: 1
        voucherId:
          type: integer
          nullable: true
          example: 1
        addressId:
          type: integer
          example: 1
        invoiceId:
          type: integer
          example: 1
        courierServiceId:
          type: integer
          example: 1
    InvoiceStatus:
      type: object
      properties:
        id:
          type: integer
          example: 1
        status:
          type: string
          example: COMPLETED
        statusDate:
          type: string
          format: datetime
          example: "2006-01-02T00:00:00.000Z"
        invoicePerShopId:
          type: integer
          example: 1
    RefundRequest:
      type: object
      properties:
        id:
          type: integer
          example: 1
        requestDate:
          type: string
          format: datetime
          example: "2006-01-02T00:00:00.000Z"
        status:
          type: string
          example: "COMPLAINED"
        type:
          type: string
          example: "COMPLAIN"
        refundAmount:
          type: number
          format: float
          example: 320000
        invoiceId:
          type: integer
          example: 1
        invoice:
          $ref: '#/components/schemas/InvoicePerShop'
    UserReviewResponse:
      type: object
      properties:
        username:
          type: string
          example: joe123
        photoUrl:
          type: string
          example: test.jpg
    TransactionReviewResponse:
      type: object
      properties:
        description:
          type: string
          example: Good product!
        rating:
          type: integer
          example: 4
        reviewDate:
          type: string
          example: '2024-12-31T00:00:00Z'
        reviewMedias:
          type: array
          items:
            $ref: '#/components/schemas/ReviewMedia'
    ReviewResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserReviewResponse'
        transactionReview:
          $ref: '#/components/schemas/TransactionReviewResponse'
        variant:
          type: array
          items:
            $ref: '#/components/schemas/Variant'
    GetReviewStatsReponse:
      type: object
      properties:
        averageRating:
          type: number
          format: float64
          example: 4.8
        totalReview:
          type: integer
          example: 542
        fiveStar:
          type: integer
          example: 20
        fourStar:
          type: integer
          example: 20
        threeStar:
          type: integer
          example: 20
        twoStar:
          type: integer
          example: 20
        oneStar:
          type: integer
          example: 20  
        withPicture:
          type: integer
          example: 10
        withComment:
          type: integer
          example: 40
    Transaction:
      type: object
      properties:
        id:
          type: integer
          example: 1
        price:
          type: number
          format: float
          example: 1000000
        totalPrice:
          type: number
          format: float
          example: 4000000
        quantity:
          type: integer
          example: 4
        note:
          type: string
          nullable: true
          example: "purchase note"
        invoiceId:
          type: integer
          example: 1
        userId:
          type: integer
          example: 1
        skuId:
          type: integer
          example: 1
    SearchAddressResponse:
      type: object
      properties:
        placeId:
          type: string
        description:
          type: string
    SellerFinanceIncomeOverview:
      type: object
      properties:
        toRelease:
          type: number
          format: float64
          example: 50000000
          description: amount which haven't been withdrawn
        released:
          type: object
          properties:
            week:
              type: number
              format: float64
              example: 50000000
              description: amount which have been withdrawn this week
            month:
              type: number
              format: float64
              example: 50000000
              description: amount which have been withdrawn this month
            total:
              type: number
              format: float64
              example: 50000000
              description: amount which have been withdrawn all time        
    SearchAddressDetailResponse:
      type: object
      properties:
        placeId:
          type: string
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float
        street:
          type: string
        postalCode:
          type: string
        subdistrict:
          $ref: '#/components/schemas/Subdistrict'
        district:
          $ref: '#/components/schemas/District'
        city:
          $ref: '#/components/schemas/City'
        province:
          $ref: '#/components/schemas/Province'
    GetShopStatsResponse:
      type: object
      properties:
        toShip:
          type: integer
        shipping:
          type: integer
        completed:
          type: integer
        refund:
          type: integer
        outOfStock:
          type: integer
    GetShopInsightResponse:
      type: object
      properties:
        visitor:
          type: integer
        pageView:
          type: integer
        order:
          type: integer
        sales:
          type: array
          items:
            type: object
            properties:
              label:
                type: string
                example: 2023-03-13T00:00:00+07:00
              value:
                type: integer
                example: 12
    GetShopProfileResponse:
      type: object
      properties:
        name:
          type: string
        logoUrl:
          type: string
        bannerUrl:
          type: string
        description:
          type: string
  requestBodies:
    WalletBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - pin
            properties:
              pin:
                type: string
                minLength: 6
                description: numeric
                example: '123456'
    RegisterUserBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
                format: email
                example: "user@mail.com"
                description: email is case insensitive
              password:
                type: string
                minLength: 8
                maxLength: 16
                description: password must include at least one uppercase letter, one lowercase letter, and one numeric. Also password must not include email name
                example: "P4ssword"
    LoginUserBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
                format: email
                example: "user@mail.com"
              password:
                type: string
                example: "password"
    GoogleLoginUserBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - credential
            properties:
              credential:
                type: string
                format: email
                example: "googlejwttokenhere"
    GoogleRegisterUserBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - credential
              - username
              - password
            properties:
              credential:
                type: string
                format: jwt
                example: "googlejwttokenhere"     
              username:
                type: string
                minLength: 5
                maxLength: 30
                example: "Acong123"
                description: username must includes at least one letter (case insensitive). May also includes number, underscore, or period
              password:
                type: string
                minLength: 8
                maxLength: 16
                example: "Password123"
                description: Password must include at least one uppercase letter, one lowercase letter, and one numeric. Also password must not include email or username.
    UserLogoutBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - refreshToken
            properties:
              refreshToken:
                type: string
                format: jwt
                example: "jwttokenhere"            
    UpdateEmailBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
            properties:
              email:
                type: string
                format: email
                description: email is case insensitive
                example: user@email.com
    UpdateUsernameBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - username
            properties:
              username:
                type: string
                description: username must includes at least one letter (case insensitive). May also includes number, underscore, or period
                minLength: 6
                maxLength: 30
                example: new_us3r.name
    UpdateProfileBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - phoneNumber
              - dob
              - gender
              - photoUrl
            properties:
              name:
                type: string
                example: new name
              phoneNumber:
                type: string
                format: numeric
                minLength: 10
                maxLength: 15
                example: 0123456789
              dob:
                type: string
                format: date
                description: date of birth. Required format is YYYY-MM-DD
                example: "2006-01-02"
              gender:
                type: string
                enum: [male, female, others]
                example: other
              photoUrl:
                type: string
                format: url
                example: http://photo.url/example.png
    RequestPasswordChangeBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - currentPassword
              - newPassword
            properties:
              currentPassword:
                type: string
                example: "Password123"   
                minLength: 8
                maxLength: 16
              newPassword:
                type: string
                minLength: 8
                maxLength: 16
                example: "Password1234"
                description: Password must include at least one uppercase letter, one lowercase letter, and one numeric. Password cannot contain username as a part of it. Also password must not include email or username.
    CompletePasswordChangeBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - verificationCode
            properties:
              verificationCode:
                type: string
                example: "k3DFs1"   
                format: Alphanumeric
                minLength: 6
                maxLength: 6
                description: Verification code is a randomly generated string which consists of 6 alphanumeric characters.
    RequestPasswordResetBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
            properties:
              email:
                type: string
                format: email
                example: "user@mail.com"
    CompletePasswordResetBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - token
              - newPassword
            properties:
              token:
                type: string
                example: "0020cf5fdf24ca583b988973fc985abc8910f049191ddfa7ca77dfd5ac705e66"   
                format: alphanumeric
                minLength: 64
                maxLength: 64
              newPassword:
                type: string
                minLength: 8
                maxLength: 16
                example: "Password1234"
                description: Password must include at least one uppercase letter, one lowercase letter, and one numeric. Password cannot contain username as a part of it. Also password must not include email or username.
    AddWishlistBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - productId
            properties:
              productId:
                type: integer
                example: 1
    AddCartItemBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - quantity
              - skuId
            properties:
              quantity:
                type: integer
                example: 1   
              notes:
                type: string
                maxLength: 50
                example: this is note
              skuId:
                type: integer
                example: 1
    UpdateCartItemBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              quantity:
                type: integer
                minimum: 1
                example: 10
                description: quantity is required if `notes` field is empty
              notes:
                type: string
                maxLength: 50
                example: this is a note
                description: notes is required if `quantity` field is empty
    AddressBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - phoneNumber
              - street
              - subdistrictId
              - isDefault
              - isPickup
            properties:
              name:
                type: string
                example: john
                maxLength: 30
              phoneNumber:
                type: string
                example: 08124212421
                format: numeric
              street:
                type: integer
                example: Jalan kamboja 123
                maxLength: 200
              details:
                type: string
                example: Sopo del
                maxLength: 30
              subdistrictId:
                type: integer
                example: 28
              isDefault:
                type: boolean
                example: true
              isPickup:
                type: boolean
                example: true
    ReviewMediaBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - url
            properties:
              url:
                type: string
                example: https://image.com/image.jpg            
    TransactionReviewBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - rating
              - transactionId
            properties:
              rating:
                type: integer
                example: 5
                minimum: 1
                maximum: 5
                description: rate the transaction
              transactionId:
                type: integer
                example: 1
                minimum: 1
                description: id of the transaction to be rated
              description:
                type: string
                example: Very nice product!
                maxLength: 500
              reviewMedias:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/requestBodies/ReviewMediaBody'
    RegisterSeaLabsPayBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - cardNumber
              - cardName
              - expiryDate
            properties:
              cardNumber:
                type: string
                format: numeric
                minLength: 16
                maxLength: 16
                example: 2795790398762135
              cardName:
                type: string
                example: Marco Loen
              expiryDate:
                type: string
                pattern: '^(0[1-9]|1[0-2])\/[0-9]{2}$'
                example: '12/24'
    CheckoutBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - addressId
              - totalPrice
              - paymentMethodId
              - items
            properties:
              addressId:
                type: integer
              totalPrice:
                type: number
                format: float
              voucherId:
                type: integer
              paymentMethodId:
                type: integer
              items:
                type: array
                items:
                  type: object
                  required:
                    - shopId
                    - courierServiceId
                    - shippingCost
                    - products
                  properties:
                    shopId:
                      type: integer
                    voucherId:
                      type: integer
                    courierServiceId:
                      type: integer
                    shippingCost:
                      type: number
                      format: float
                    products:
                      type: array
                      items:
                        type: object
                        required:
                          - cartItemId
                          - quantity
                        properties:
                          cartItemId:
                            type: integer
                          quantity:
                            type: integer
    PayInvoiceBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - invoiceId
              - paymentMethodId
            properties:
              invoiceId:
                type: integer
              paymentMethodId:
                type: integer
              cardNumber:
                type: string
                format: numeric
              Signature:
                type: string
                format: alphanumeric
              Amount:
                type: number
                format: float
              TxnID:
                type: string
                format: alphanumeric
    CancelCheckoutBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - invoiceId
            properties:
              invoiceId:
                type: integer
    StepUpBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - pin
            properties:
              pin:
                type: string
                format: numeric
                minLength: 6
                maxLength: 6
    AddCourierBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - code
              - service
            properties:
              name:
                type: string
                example: JNE
              code:
                type: string
                example: jne
              service:
                type: array
                items:
                  type: object
                  required:
                    - name
                    - code
                    - minDuration
                    - maxDuration
                  properties:
                    name:
                      type: string
                      example: REG
                    code:
                      type: string
                      example: reg
                    minDuration:
                      type: integer
                      example: 1
                    maxDuration:
                      type: integer
                      example: 3
    ChangePinRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - currentPin
              - newPin
            properties:
              currentPin:
                type: string
                format: numeric
                minLength: 6
                maxLength: 6
                example: "123456"
              newPin:
                type: string
                format: numeric
                minLength: 6
                maxLength: 6
                example: "123456"
    CompleteChangePinRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - verificationCode
            properties:
              verificationCode:
                type: string
                format: alphanumeric
                minLength: 6
                maxLength: 6
                example: "1a3c5e"
    WithdrawInvoiceRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - orderId
            properties:
              orderId:
                type: array
                items:
                  type: integer
                example: [1, 2]  
  
    AddShopVisitorRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - shopId
            properties:
              shopId:
                type: integer
                example: 1
    AddProductViewRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - productId
            properties:
              productId:
                type: integer
                example: 1
    UpdateActivationRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - isActive
            properties:
              isActive:
                type: boolean
                example: true
    CompleteResetPinRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - token
              - newPin
            properties:
              token:
                type: string
                format: alphanumeric
                minLength: 6
                maxLength: 6
                example: "1a3c5e"
              newPin:
                type: string
                format: numeric
                minLength: 6
                maxLength: 6
                example: "123456"
    CreateShopBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - addressId
              - courierIds
            properties:
              name:
                type: string
                minLength: 5
                maxLength: 30
                description: Alphanumeric with space (' ') included. Must at least has one letter
                example: shop name
              addressId:
                type: integer
                example: 1
              courierIds:
                type: array
                items:
                  type: integer
                  example: 1
              photoUrl:
                type: string
                format: url
                example: image.png
    UpdateShopProfileBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - logoUrl
              - bannerUrl
              - description
            properties:
              name:
                type: string
              logoUrl:
                type: string
              bannerUrl:
                type: string
              description:
                type: string
    ToggleSellerShipmenttBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - courierId
            properties:
              courierId:
                type: integer
    UpdateRefundStatusBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:   
              - refundStatus
            properties:
              refundStatus:
                type: string
                enum: [SELLER_APPROVED, REJECTED]
                example: SELLER_APPROVED 
    VariantBody:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          maxLength: 20
          example: variant name
        mediaUrl:
          type: string
          format: url
          example: http://image.png
    VariantGroupsBody:
      type: object
      required:
        - name
        - variants
      properties:
        name:
          type: string
          example: variant group name
        variants:
          type: array
          minLength: 1
          maxLength: 50
          items:
            $ref: '#/components/requestBodies/VariantBody'
    SkuBody:
      type: object
      required:
        - variantIds
        - price
        - stock
      properties:
        variantIds:
          type: array
          description: value in this properties refer to a index of a variant in variant group field
          items:
            type: integer
            example: 1
        price:
          type: number
          format: float
          minimum: 0
          exclusiveMinimum: true
          example: 1000
        stock:
          type: integer
          minimum: 0
          example: 100
        sku:
          type: string
          maxLength: 16
          example: product sku
    ProductBulkPriceBody:
      type: object
      required:
        - minQuantity
        - price
      properties:
        minQuantity:
          type: integer
          minimum: 1
          example: 100
        price:
          type: number
          format: float
          example: 1000
    CreateProductBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - description
              - isHazardous
              - isActive
              - isNew
              - weight
              - length
              - width
              - height
              - categoryId
              - media
              - courierIds
            properties:
              name:
                type: string
                minLength: 5
                maxLength: 255
                example: product name
              description:
                type: string
                minLength: 20
                maxLength: 3000
                example: product description goes here
              isHazardous:
                type: boolean
                example: false
              isActive:
                type: boolean
                example: true
              isNew:
                type: boolean
                example: true
              weight:
                type: number
                format: float
                example: 10
              length:
                type: number
                format: float
                example: 10
              width:
                type: number
                format: float
                example: 10
              height:
                type: number
                format: float
                example: 10
              categoryId:
                type: number
                example: 1
              media:
                type: array
                minLength: 1
                maxLength: 10
                items:
                  type: string
                  format: url
                  example: http://image.png
              courierIds:
                type: array
                minLength: 1
                items:
                  type: integer
                  minimum: 1
                  example: 1
              stock:
                type: integer
                minimum: 0
                example: 1
              price:
                type: number
                format: float
                minimum: 0
                exclusiveMinimum: true
                example: 1000
              bulkPrice:
                $ref: '#/components/requestBodies/ProductBulkPriceBody'
              variantGroups:
                type: array
                maxLength: 2
                items:
                  $ref: '#/components/requestBodies/VariantGroupsBody'
              skus:
                type: array
                items:
                  $ref: '#/components/requestBodies/SkuBody'
    CreateVoucherBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - code
              - amount
              - type
              - isHidden
              - description
              - minimumSpend
              - totalQuota
              - startFrom
              - expiredAt
            properties:
              name:
                type: string
                minLength: 1
                maxLength: 100
                example: voucher name
              code:
                type: string
                minLength: 1
                maxLength: 9
                example: BAKM1234A
              amount:
                type: integer
                minimum: 0
                maximum: 500000000
                example: 1000
              type:
                type: string
                example: nominal
              isHidden:
                type: boolean
                example: false
              description:
                type: string
                minLength: 5
                maxLength: 1000
                example: voucher bakmi kejaksaan enak
              minimumSpend:
                type: integer
                minimum: 0
                maximum: 500000000
                example: 1000
              totalQuota:
                type: integer
                minimum: 1
                maximum: 200000
                example: 10
              startFrom:
                type: string
                format: datetime
                example: "2006-01-02T00:00:00.000Z"
              expiredAt:
                type: string
                format: datetime
                example: "2006-01-02T00:00:00.000Z"
    ChatRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - message
            properties:
              message:
                type: string
                example: "hai sayang"
              type:
                type: string
                example: "complaint"
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer